use fhe::{
    errors::FHEError,
    fhe_schemes::FHEScheme,
    gen_cryptocontext_parameters::{self, SchemeParameters},
    pke::scheme::ckksrns::{CryptoContextCKKSRNS, CryptoContextParams},
    scale_technique::ScalingTechnique,
};

fn main() {
    // ‚ùóüá∑üá∫‚ùó
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è CKKS –≤–∫–ª—é—á–∞–µ—Ç —á–µ—Ç—ã—Ä–µ –º–µ—Ç–æ–¥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∞,
    // –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–∑—ã–≤–∞—é—Ç—Å—è "FIXEDMANUAL*", "*FIXEDAUTO*", "FLEXIBLEAUTO" –∏ "FLEXIBLEAUTOEXT".
    // –≠—Ç–∏ –º–µ—Ç–æ–¥—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∞ –æ–ø–∏—Å–∞–Ω—ã –≤ —Ä–∞–∑–¥–µ–ª–µ CKKS –Ω–∞ https://eprint.iacr.org/2022/915.

    // –ü—Ä–µ–∂–¥–µ —á–µ–º –º—ã –Ω–∞—á–Ω–µ–º, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –æ–± –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∞
    // –∫–æ—Ç–æ—Ä–∞—è –∑–∞–Ω–∏–º–∞–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ –≤ CKKS. –í—Å—è–∫–∏–π —Ä–∞–∑, –∫–æ–≥–¥–∞ –º—ã –ø–µ—Ä–µ–º–Ω–æ–∂–∞–µ–º –¥–≤–∞
    // —à–∏—Ñ—Ä–æ—Ç–µ–∫—Å—Ç–∞ c1 –∏ c2, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ —à–∏—Ñ—Ä—É—é—Ç —á–∏—Å–ª–∞ m1*D –∏ m2*D, –º—ã –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç,
    // –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ m1*m2*D^2.
    //
    // –ü–æ—Å–∫–æ–ª—å–∫—É –º–∞—Å—à—Ç–∞–±–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —ç—Ç–æ–≥–æ —á–∏—Å–ª–∞ —Ä–∞–≤–µ–Ω D^2, –º—ã –≥–æ–≤–æ—Ä–∏–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–º–µ–µ—Ç –≥–ª—É–±–∏–Ω—É 2.
    // –ü–æ–Ω—è—Ç–Ω–æ, —á—Ç–æ —à–∏—Ñ—Ä–æ—Ç–µ–∫—Å—Ç –≥–ª—É–±–∏–Ω—ã 2 –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –∫ —à–∏—Ñ—Ä–æ—Ç–µ–∫—Å—Ç–∞–º –≥–ª—É–±–∏–Ω—ã 1,
    // –ø–æ—Ç–æ–º—É —á—Ç–æ –∏—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –º–∞—Å—à—Ç–∞–±–∞ —Ä–∞–∑–Ω—ã–µ. –ü—Ä–∏ –ø–µ—Ä–µ—Å—á–µ—Ç–µ –±–µ—Ä–µ—Ç—Å—è —à–∏—Ñ—Ä–æ—Ç–µ–∫—Å—Ç –≥–ª—É–±–∏–Ω—ã 2
    // –∏ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ —à–∏—Ñ—Ä –≥–ª—É–±–∏–Ω—ã –≥–ª—É–±–∏–Ω—ã 1 —Å –ø–æ–º–æ—â—å—é –æ–ø–µ—Ä–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –æ—á–µ–Ω—å –ø–æ—Ö–æ–∂–∞
    // –Ω–∞ –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ D=2^p.
    //
    // –ü–æ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞—à–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è CKKS —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ RNS, —á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç,
    // —á—Ç–æ –º—ã –∏–∑–±–µ–≥–∞–µ–º —Ä–∞–±–æ—Ç—ã —Å –±–æ–ª—å—à–∏–º–∏ —á–∏—Å–ª–∞–º–∏ –∏ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ü–µ–ª—ã–º–∏ —á–∏—Å–ª–∞–º–∏.
    // –û–¥–Ω–æ –∏–∑ –æ—Å–ª–æ–∂–Ω–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä–æ–µ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ç–æ–º, —á—Ç–æ –º—ã –º–æ–∂–µ–º –∏–∑–º–µ–Ω—è—Ç—å –º–∞—Å—à—Ç–∞–± —Ç–æ–ª—å–∫–æ
    // –ø—É—Ç–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞, –∞ –Ω–µ D=2^p. –ï—Å—Ç—å –¥–≤–∞ —Å–ø–æ—Å–æ–±–∞ —Ä–µ—à–∏—Ç—å —ç—Ç—É –ø—Ä–æ–±–ª–µ–º—É.
    //
    // üëâ –ü–µ—Ä–≤—ã–π - –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞, –∫–∞–∫ –º–æ–∂–Ω–æ –±–ª–∏–∂–µ –∫ 2^p, –∏ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç—å, —á—Ç–æ –º–∞—Å—à—Ç–∞–±–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
    // –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–µ–∏–∑–º–µ–Ω–Ω—ã–º. –≠—Ç–æ –Ω–µ–∏–∑–±–µ–∂–Ω–æ –≤–ª–µ—á–µ—Ç –∑–∞ —Å–æ–±–æ–π –Ω–µ–∫–æ—Ç–æ—Ä—É—é –æ—à–∏–±–∫—É –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏–∏ –∏ –¥–ª—è —ç—Ç–æ–≥–æ
    // —Å—Ü–µ–Ω–∞—Ä–∏—è –µ—Å—Ç—å –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞: FLEXIBLEAUTO –∏ FLEXIBLEAUTOEXT.
    // üëâ –í—Ç–æ—Ä–æ–π —Å–ø–æ—Å–æ–± —Ä–µ—à–µ–Ω–∏—è —ç—Ç–æ–π –ø—Ä–æ–±–ª–µ–º—ã - –æ—Ç—Å–ª–µ–¥–∏—Ç—å, –∫–∞–∫ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –º–∞—Å—à—Ç–∞–±–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è
    // –ø–æ–¥—Å—Ç—Ä–æ–∏—Ç—å—Å—è –ø–æ–¥ –Ω–µ–≥–æ. –≠—Ç–æ —Ç–æ, —á—Ç–æ –º—ã –¥–µ–ª–∞–µ–º –¥–ª—è FLEXIBLEAUTO –∏ FLEXIBLEAUTOEXT –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ CKKS.
    //
    // –ö–æ–º–ø—Ä–æ–º–∏—Å—Å –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ç–æ–º. —á—Ç–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤ FLEXIBLEAUTO - –æ–±—ã—á–Ω–æ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ
    // –º–µ–¥–ª–µ–Ω–Ω–µ–µ (–ø–æ –Ω–∞—à–µ–º—É –æ–ø—ã—Ç—É –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–∫–æ–ª–æ 5-35 % –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π)
    // —ç—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∏–∑-–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏–π. –ú—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∏ FLEXIBLEAUTO(EXT) —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º,
    // —á—Ç–æ –æ–Ω–∞ —Å–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ –Ω—é–∞–Ω—Å—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≥–ª—É–±–∏–Ω—ã —à–∏—Ñ—Ä–æ—Ç–µ–∫—Å—Ç–æ–≤ –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã–∑–æ–≤–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
    // –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∞. –ü–æ—ç—Ç–æ–º—É FLEXIBLEAUTO(EXT) –±–æ–ª—å—à–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ
    // –Ω–µ —Ö–æ—Ç—è—Ç –≤–Ω–∏–∫–∞—Ç—å –≤ –¥–µ—Ç–∞–ª–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏, –∏–ª–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞.

    // –ù–∞–ø—Ä–æ—Ç–∏–≤, FIXEDMANUAL –±–æ–ª—å—à–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –≤ –ø—Ä–æ–¥–µ, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏.
    // –ü–µ—Ä–≤—ã–µ –¥–≤–µ —á–∞—Å—Ç–∏ —ç—Ç–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ–∞–ª–∏–∑—É—é—Ç –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ, —Ç–æ –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—é
    // f(x) = x^18 + x^9 + 1, –∏—Å–ø–æ–ª—å–∑—É—è –≤—Å–µ —á–µ—Ç—ã—Ä–µ –º–µ—Ç–æ–¥–∞.

    // ‚ùóüá¨üáß‚ùó
    //  Our implementation of CKKS includes four rescaling methods called
    // "FIXEDMANUAL*, *FIXEDAUTO*, "FLEXIBLEAUTO", and "FLEXIBLEAUTOEXT".
    // THese rescaling methods are explained in the CKKS section of
    // https://eprint.iacr.org/2022/915.

    // Before we start, we need to say a few words about the rescale
    // operation, which is central in CKKS. Whenever we multiply two
    // ciphertexts c1 and c2 which encrypt numbers m1*D and m2*D
    // respectively, we get a result that looks like m1*m2*D^2. Since the
    // scaling factor of this number is D^2, we say that the result is of
    // depth 2. It is clear that a ciphertext of depth 2 cannot be added
    // to ciphertexts of depth 1, because their scaling factors are
    // different. Rescaling takes a ciphertext of depth 2, and makes it of
    // depth 1 by an operation that looks a lot like dividing by D=2^p.

    // For efficiency reasons, our implementation of CKKS works in the
    // RNS space, which means that we avoid working with big numbers and
    // we only work with native integers. One complication that arises
    // from this is that we can only rescale by dividing by certain prime
    // numbers and not D=2^p.

    // There are two ways to deal with this. The first is to choose prime
    // numbers as close to 2^p as possible, and assume that the scaling
    // factor remains the same. This inevitably incurs some approximation
    // error, and there are two variants for this scenario: FLEXIBLEAUTO
    // and FLEXIBLEAUTOEXT.

    // The second way of dealing with this is to track how the scaling
    // factor changes and try to adjust for it. This is what we do for the
    // FLEXIBLEAUTO and FLEXIBALEAUTOEXT variants of CKKS. The tradeoff is
    // that FLEXIBLEAUTO*    * computations are typically somewhat slower (based on our experience
    // the slowdown is around 5-35% depending on the complexity of the
    // computation), because of the adjustment of values that need to
    // take place.

    // We have designed FLEXIBLEAUTO(EXT) so it hides all the nuances of
    // tracking the depth of ciphertexts and having to call the rescale
    // operation. Therefore, FLEXIBLEAUTO(EXT) is more appropriate for users
    // who do not want to get into the details of the underlying crypto
    // and math, or who want to put together a quick prototype. On the
    // contrary, FIXEDMANUAL is more appropriate for production
    // applications that have been optimized by experts.

    // The first two parts of this demo implement the same computation, i.e, the function
    // f(x) = x^18 + x^9 + 1, using all four methods.

    automatic_rescale_demo(ScalingTechnique::FlexibleAuto);
    automatic_rescale_demo(ScalingTechnique::FlexibleAutoExt);
    automatic_rescale_demo(ScalingTechnique::FixedAuto);
    manual_rescale_demo(ScalingTechnique::FixedManual);

    // ‚ùóüá∑üá∫‚ùó
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è CKKS –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–≤–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–ª—é—á–µ–π,
    // –∞ –∏–º–µ–Ω–Ω–æ BV –∏ HYBRID.
    //
    // üëâ BV —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ—Ö–Ω–∏–∫–µ, –∏–∑–≤–µ—Å—Ç–Ω–æ–π —Ç–∞–∫–∂–µ –∫–∞–∫ –ø–æ—Ä–∞–∑—Ä—è–¥–Ω–æ–µ —Ä–∞–∑–ª–æ–∂–µ–Ω–∏–µ (–∫–∞–∫ RNS, —Ç–∞–∫ –∏
    //   –æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞ —Ä–∞–∑–º–µ—Ä–µ —Ä–∞–∑—Ä—è–¥–∞). GHS (–±–æ–ª—å—à–µ –Ω–µ —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ) —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç
    // —É–¥–≤–æ–µ–Ω–∏—é –º–æ–¥—É–ª—è —à–∏—Ñ—Ä–æ—Ç–µ–∫—Å—Ç–∞
    //
    // üëâ HYBRID —Å–æ—á–µ—Ç–∞–µ—Ç –≤ —Å–µ–±–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏ BV, –∏ GHS.
    //
    // –ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–µ—Ö–Ω–∏–∫–∞—Ö –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–ª—é—á–µ–π –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    // KeySwitchGen –≤ keyswitch-bv.h/cpp –∏ keyswitch-hybrid.h/cpp.
    //
    // –í –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–ª—É—á–∞–µ–≤ HYBRID –±—É–¥–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–π –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–æ–π –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–ª—é—á–µ–π,
    // –ø–æ—ç—Ç–æ–º—É –º—ã –ø–æ—Å–≤—è—â–∞–µ–º —Ç—Ä–µ—Ç—å—é –∏ —á–µ—Ç–≤–µ—Ä—Ç—É—é —á–∞—Å—Ç–∏ —ç—Ç–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–ª—é—á–µ–π —Å –ø–æ–º–æ—â—å—é HYBRID.

    // ‚ùóüá¨üáß‚ùó
    //      Our implementation of CKKS supports two different algorithms
    // for key switching, namely BV and HYBRID. BV corresponds to
    // a technique also known as digit decomposition (both RNS and based
    // on a digit size). GHS (not implemented separately anymore) corresponds to ciphertext
    // modulus doubling, and HYBRID combines the characteristics of both
    // BV and GHS. Please refer to the documentation of KeySwitchGen in
    // keyswitch-bv.h/cpp and keyswitch-hybrid.h/cpp for more
    // details about the different key switch techniques.
    //      For most cases, HYBRID will be the most appropriate and efficient
    // key switching technique, and this is why we devote the third and
    // fourth part of this demo to HYBRID key switching.

    hybrid_key_switching_demo1();
    hybrid_key_switching_demo2();
}

fn automatic_rescale_demo(scale_technique: ScalingTechnique) -> Result<(), FHEError> {
    // ‚ùóüá∑üá∫‚ùó
    // –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ main(), —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π
    // –æ–ø–µ—Ä–∞—Ü–∏—è rescale (–ø–µ—Ä–µ–º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ). –ü–æ–Ω–∏–º–∞–Ω–∏–µ Rescale() –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è
    // –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ CKKS FLEXIBLEAUTO, –æ–¥–Ω–∞–∫–æ –æ–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ç–æ–≥–æ,
    // —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–Ω—É—Ç—Ä–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞.
    //
    // FLEXIBLEAUTO - —ç—Ç–æ –≤–∞—Ä–∏–∞–Ω—Ç CKKS, –∫–æ—Ç–æ—Ä—ã–π –∏–º–µ–µ—Ç –¥–≤–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    // üëâ 1 - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–µ–º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —É–º–Ω–æ–∂–µ–Ω–∏–µ–º.
    //      –≠—Ç–æ —Å–¥–µ–ª–∞–Ω–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±—ã–ª–æ –ø—Ä–æ—â–µ –¥–µ–ª–∞—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –Ω–∞–¥ FHE,
    //      –Ω–µ –∑–∞–±–æ—Ç—è—Å—å –æ –≥–ª—É–±–∏–Ω–µ —à–∏—Ñ—Ä–æ—Ç–µ–∫—Å—Ç–æ–≤ –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–∏.
    // üëâ 2 - –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Ç–æ—á–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —à–∏—Ñ—Ä–æ—Ç–µ–∫—Å—Ç–æ–≤.
    //      –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤ FLEXIBLEAUTO –±—É–¥—É—Ç –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–º–∏, —á–µ–º —Ç–µ –∂–µ
    //      –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤ FIXEDMANUAL. –ò–º–µ–π—Ç–µ –≤ –≤–∏–¥—É, —á—Ç–æ —ç—Ç–∞ —Ä–∞–∑–Ω–∏—Ü–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –æ—á–µ–≤–∏–¥–Ω–æ–π
    //      —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è—Ö —Å –±–æ–ª—å—à–æ–π –≥–ª—É–±–∏–Ω–æ–π —É–º–Ω–æ–∂–µ–Ω–∏—è; —ç—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ—Ç–æ–º—É,
    //      —á—Ç–æ –±–æ–ª—å—à–∞—è –≥–ª—É–±–∏–Ω–∞ —É–º–Ω–æ–∂–µ–Ω–∏—è –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –Ω–∞–º –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –±–æ–ª—å—à–µ –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª,
    //      –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–ª–∏–∑–∫–∏—Ö –∫ D=2^p, –∞ —ç—Ç–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≤—Å–µ —Ç—Ä—É–¥–Ω–µ–µ –∏ —Ç—Ä—É–¥–Ω–µ–µ –ø–æ –º–µ—Ä–µ
    //      —É–≤–µ–ª–∏—á–µ–Ω–∏—è –≥–ª—É–±–∏–Ω—ã —É–º–Ω–æ–∂–µ–Ω–∏—è.

    // ‚ùóüá¨üáß‚ùó
    // Please read comments in main() for an introduction to what the
    // rescale operation is. Knowing about Rescale() is not necessary
    // to use the FLEXIBLEAUTO CKKS variant, it is however needed to
    // understand what's happening underneath.
    //
    // FLEXIBLEAUTO is a variant of CKKS that has two main features:
    // üëâ 1 - It automatically performs rescaling before every multiplication.
    //    This is done to make it easier for users to write FHE
    //    computations without worrying about the depth of ciphertexts
    //    or rescaling.
    // üëâ 2 - It tracks the exact scaling factor of all ciphertexts.
    //    This means that computations in FLEXIBLEAUTO will be more
    //    accurate than the same computations in FIXEDMANUAL. Keep
    //    in mind that this difference only becomes apparent when
    //    dealing with computations of large multiplicative depth; this
    //    is because a large multiplicative depth means we need to find
    //    more prime numbers sufficiently close to D=2^p, and this
    //    becomes harder and harder as the multiplicative depth
    //    increases.

    println!(
        "\n\n\n{}\n",
        match scale_technique {
            ScalingTechnique::FlexibleAuto => "FLEXIBLE AUTO DEMO",
            _ => "FIXED AUTO DEMO",
        }
    );

    let batch_size = 8;
    let mut parameters = CryptoContextParams::<CryptoContextCKKSRNS>::new();
    parameters.set_to_defaults(FHEScheme::CKKSRNS)?;
    parameters.set_multiplicative_depth(5)?;
    parameters.set_scaling_mod_size(50)?;
    parameters.set_scaling_technique(scale_technique)?;
    parameters.set_batch_size(batch_size)?;

    // let cc = gen_crypto_context(parameters)?;

    println!(
        "CKKS scheme is using ring dimension {}\n\n",
        parameters.ring_dimension()
    );

    todo!()
}

fn manual_rescale_demo(_scale_technique: ScalingTechnique) {
    todo!()
}

fn hybrid_key_switching_demo1() {
    todo!()
}

fn hybrid_key_switching_demo2() {
    todo!()
}
