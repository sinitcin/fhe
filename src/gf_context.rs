use super::gf_element::GFElement;
use super::Element;

/// В контексте данного кода, GF в GFContext означает "Galois Field",
/// что переводится как "Поле Галуа" или "конечное поле".
///
/// Поле Галуа формализуется как набор элементов с двумя операциями,
/// сложением и умножением, которые удовлетворяют определенным аксиомам
/// (закрытость, ассоциативность, коммутативность, существование
/// нейтральных элементов, существование обратных элементов).
/// Конечные поля часто обозначаются как (GF(p^n)), где
/// (p) — простое число, а (n) — положительное целое число,
/// указывая на количество элементов в поле.
///
/// В существующем коде GFContext предназначен для управления контекстом,
/// связанным с определенным полем Галуа. Это включает в себя основу (модуль),
/// относительно которой выполняются вычисления. Создавая экземпляр
/// GFContext с определенным модулем, вы фактически устанавливаете
/// параметры для операций в этом конкретном поле Галуа.
///
/// Напомню, что операции в конечном поле осуществляются по модулю
/// (в данном случае значением modulo в GFContext), что означает,
/// что все арифметические операции возвращают результаты в пределах
/// фиксированного набора значений от 0 до modulo - 1.
/// Это свойство лежит в основе многих криптографических систем и алгоритмов,
/// где требуется заданная структура и предсказуемость операций.
///
/// реализация для генератора полей:
/// ```
/// let gf5 = FieldGenerator::new(5);
/// println!("{:?}",gf5);
/// println!("{:?}",gf5.element(3));
/// ```
///
#[derive(Debug)]
pub struct GFContext {
    modulo: Element,
}

impl GFContext {
    pub fn new(x: u64) -> Self {
        Self { modulo: x }
    }
    pub fn element(&self, x: u64) -> GFElement {
        GFElement::new(x, self.modulo)
    }
}
