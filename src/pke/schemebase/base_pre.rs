/*
 * Abstract interface class for LBC PRE algorithms
 * Element a ring element.
 */
pub trait PREBase<Element> {
    type ParmType; // = Element::Params;
    type IntType; //  = Element::Integer;
    type DugType; //  = Element::DugType;
    type DggType; //  = Element::DggType;
    type TugType; //  = Element::TugType;

    fn new() -> Self;

    /*
     * Virtual function to generate 1..log(q) encryptions for each bit of the
     * original private key Variant that uses the public key for the new secret
     * key.
     *
     * @param oldPrivateKey original private key used for decryption.
     * @param newPublicKey public key for the new secret key.
     * @return the re-encryption key.
     */
    fn re_key_gen(
        old_private_key: PrivateKey<Element>,
        new_public_key: PublicKey<Element>,
    ) -> EvalKey<Element>;

    /*
     * Virtual function to define the interface for re-encypting ciphertext
     * using the array generated by ProxyGen
     *
     * @param &ciphertext the input ciphertext.
     * @param &evalKey proxy re-encryption key.
     * @param publicKey the public key of the recipient of the re-encrypted
     * ciphertext.
     * @return the ciphertext
     */
    fn re_encrypt(
        ciphertext: ConstCiphertext<Element>,
        eval_key: EvalKey<Element>,
        public_key: PublicKey<Element>,
    ) -> Ciphertext<Element>;
}
