use std::mem;

use crate::{errors::FHEError, fhe_schemes::FHEScheme, scale_technique::ScalingTechnique};

pub type PlaintextModulus = u64;

#[allow(dead_code)]
#[derive(Clone, Debug, Default)]
pub struct SchemeParameters {
    scheme: FHEScheme,

    /// üá∑üá∫ PlaintextModulus ptModulus –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Å—Ö–µ–º–∞—Ö —Ç–∏–ø–∞ BGV/BFV –∏ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–æ—Å—Ç —à—É–º–∞
    /// üá¨üáß PlaintextModulus ptModulus is used in BGV/BFV type schemes and impacts noise growth
    plain_text_modulus: PlaintextModulus,

    /// üá∑üá∫ digitSize –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –∫–ª—é—á–µ–π BV (KeySwitchTechnique = BV) –∏ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–æ—Å—Ç —à—É–º–∞
    /// üá¨üáß digitSize is used in BV Key Switching only (KeySwitchTechnique = BV) and impacts noise growth
    digit_size: u32,

    /// üá∑üá∫ StandardDeviation –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–∞—É—Å—Å–æ–≤—ã—Ö –æ—à–∏–±–æ–∫
    /// üá¨üáß standardDeviation is used for Gaussian error generation
    standard_deviation: f64,

    /// üá∑üá∫ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π: GAUSSIAN, UNIFORM_TERNARY –∏ —Ç. –¥.
    /// üá¨üáß Secret key distribution: GAUSSIAN, UNIFORM_TERNARY, etc.
    secret_key_distribution: SecretKeyDistribution,

    /// üá∑üá∫ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å —Ä–µ-–ª–∏–Ω–µ–∞—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª–∏–Ω–æ–º–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ª–µ–Ω–∏–≤–æ–π —Ä–µ-–ª–∏–Ω–µ–∞—Ä–∏–∑–∞—Ü–∏–∏)
    /// üá¨üáß Max relinearization degree of secret key polynomial (used for lazy relinearization)
    max_relinearization_secret_key_degree: u32,

    /// üá∑üá∫ –¢–µ—Ö–Ω–∏–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–ª—é—á–µ–π: BV –∏–ª–∏ HYBRID –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è
    /// –î–ª—è BV —É –Ω–∞—Å –Ω–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –º–æ–¥—É–ª—è, –ø–æ—ç—Ç–æ–º—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –º–æ–¥—É–ª—è —à–∏—Ñ—Ä–æ—Ç–µ–∫—Å—Ç–∞ Q.
    /// –î–ª—è HYBRID —É –Ω–∞—Å –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å P, –ø–æ—ç—Ç–æ–º—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –º–æ–¥—É–ª—è P*Q.
    /// –î–ª—è BV –Ω–∞–º –Ω—É–∂–µ–Ω digitSize - —Ä–∞–∑–º–µ—Ä —Ü–∏—Ñ—Ä—ã –≤ —Ü–∏—Ñ—Ä–æ–≤–æ–º —Ä–∞–∑–ª–æ–∂–µ–Ω–∏–∏
    /// –î–ª—è HYBRID –Ω–∞–º –Ω—É–∂–Ω–æ numLargeDigits - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä –≤ —Ü–∏—Ñ—Ä–æ–≤–æ–º —Ä–∞–∑–ª–æ–∂–µ–Ω–∏–∏
    /// –•–æ—Ä–æ—à–æ –±—ã –∏–º–µ—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É numLargeDigits (–≤–æ–∑–º–æ–∂–Ω–æ, numPrimesInDigit?).
    ///
    /// üá¨üáß key switching technique: BV or HYBRID currently
    /// For BV we do not have extra modulus, so the security depends on ciphertext modulus Q.
    /// For HYBRID we do have extra modulus P, so the security depends on modulus P*Q
    /// For BV we need digitSize - digit size in digit decomposition
    /// For HYBRID we need numLargeDigits - number of digits in digit decomposition
    /// it is good to have alternative to numLargeDigits (possibly numPrimesInDigit?)
    key_switch_technique: KeySwitchTechnique,

    /// üá∑üá∫ —Ç–µ—Ö–Ω–∏–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∞/–º–æ–¥—É–ª—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –≤ CKKS/BGV: FLEXIBLEAUTOEXT, FIXEDMANUL, FLEXIBLEAUTO –∏ –¥—Ä.
    /// –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Å–º. —Ç—É—Ç https://eprint.iacr.org/2022/915
    ///
    /// üá¨üáß rescaling/modulus switching technique used in CKKS/BGV: FLEXIBLEAUTOEXT, FIXEDMANUL, FLEXIBLEAUTO, etc.
    /// see https://eprint.iacr.org/2022/915 for details
    scaling_technique: ScalingTechnique,

    /// üá∑üá∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–ø–∞–∫–æ–≤–∞—Ç—å –≤ –∫–æ–¥–∏—Ä–æ–≤–∫—É (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤)
    /// üá¨üáß max batch size of messages to be packed in encoding (number of slots)
    batch_size: u32,

    /// üá∑üá∫ —Ä–µ–∂–∏–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏
    /// üá¨üáß PRE security mode
    proxy_reencryption_mode: Option<ProxyReEncryptionMode>,

    /// üá∑üá∫ –†–µ–∂–∏–º –º–Ω–æ–≥–æ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ BFV/BGV
    /// NOISE_FLOODING_MULTIPARTY —è–≤–ª—è–µ—Ç—Å—è –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º, —á–µ–º FIXED_NOISE_MULTIPARTY.
    /// üá¨üáß Multiparty security mode in BFV/BGV
    /// NOISE_FLOODING_MULTIPARTY is more secure than FIXED_NOISE_MULTIPARTY.
    multiparty_mode: MultipartyMode,

    /// üá∑üá∫ –†–µ–∂–∏–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ CKKS
    /// –í —Ä–µ–∂–∏–º–µ EXEC_NOISE_ESTIMATION –º—ã –æ—Ü–µ–Ω–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å —à—É–º–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –∫ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º –≤—ã—á–∏—Å–ª–µ–Ω–∏—è–º, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Ö–æ—Ä–æ—à—É—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å.
    /// –í —Ä–µ–∂–∏–º–µ EXEC_EVALUATION –º—ã –≤–≤–æ–¥–∏–º –Ω–∞—à—É –æ—Ü–µ–Ω–∫—É —à—É–º–∞ –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–µ–±—É–µ–º—ã–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è.
    /// üá¨üáß Execution mode in CKKS
    /// In EXEC_NOISE_ESTIMATION mode, we estimate the noise we need to add to the actual computation to guarantee good security.
    /// In EXEC_EVALUATION mode, we input our noise estimate and perform the desired secure encrypted computation.
    execution_mode: ExecutionMode,

    /// üá∑üá∫ –†–µ–∂–∏–º —à—É–º–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ –≤ CKKS
    /// NOISE_FLOODING_DECRYPT –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–µ–Ω, —á–µ–º FIXED_NOISE_DECRYPT, –Ω–æ –æ–Ω —Ç—Ä–µ–±—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –¥–≤–∞–∂–¥—ã.
    /// üá¨üáß Decryption noise mode in CKKS
    /// NOISE_FLOODING_DECRYPT is more secure than FIXED_NOISE_DECRYPT, but it requires executing all computations twice.
    decryption_noise_mode: DecryptionNoiseMode,

    /// üá∑üá∫ –û—Ü–µ–Ω–∫–∞ —à—É–º–∞ –≤ CKKS –¥–ª—è —Ä–µ–∂–∏–º–∞ NOISE_FLOODING_DECRYPT.
    /// –≠—Ç–∞ –æ—Ü–µ–Ω–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ EXEC_NOISE_ESTIMATION.
    /// üá¨üáß Noise estimate in CKKS for NOISE_FLOODING_DECRYPT mode.
    /// This estimate is obtained from running the computation in EXEC_NOISE_ESTIMATION mode.
    noise_estimate: f64,

    /// üá∑üá∫ –ñ–µ–ª–∞–µ–º–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è 128-–±–∏—Ç–Ω—ã—Ö CKKS. –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ NOISE_FLOODING_DECRYPT –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è.
    /// üá¨üáß Desired precision for 128-bit CKKS. We use this value in NOISE_FLOODING_DECRYPT mode to determine the scaling factor.
    desired_precision: f64,

    /// üá∑üá∫ –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å CKKS –≤ —Ä–µ–∂–∏–º–µ NOISE_FLOODING_DECRYPT. –≠—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –ª—é–±–æ–π –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫.
    /// –í —á–∞—Å—Ç–Ω–æ—Å—Ç–∏, –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞ –Ω–µ –±–æ–ª–µ–µ 2^(-statisticalSecurity).
    /// üá¨üáß Statistical security of CKKS in NOISE_FLOODING_DECRYPT mode. This is the bound on the probability of success
    /// that any adversary can have. Specifically, they a probability of success of at most 2^(-statisticalSecurity).
    statistical_security: u32,

    /// üá∑üá∫ –≠—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤, –æ–∂–∏–¥–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–ª—è —Å–≤–æ–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è
    /// –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ CKKS –≤ —Ä–µ–∂–∏–º–µ NOISE_FLOODING_DECRYPT.
    /// üá¨üáß This is the number of adversarial queries a user is expecting for their application, which we use to ensure
    /// security of CKKS in NOISE_FLOODING_DECRYPT mode.
    num_adversarial_queries: u32,

    /// üá∑üá∫ –≠—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ—Ä–æ–Ω –≤ –ø–æ—Ä–æ–≥–æ–≤–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏, –∫–æ—Ç–æ—Ä–æ–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–≥–æ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
    /// üá¨üáß This is the number of parties in a threshold application, which is used for bound on the joint secret key
    threshold_num_of_parties: u32,

    /// üá∑üá∫ firstModSize –∏ scalingModSize –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –º–æ–¥—É–ª—è —à–∏—Ñ—Ä–æ—Ç–µ–∫—Å—Ç–∞.
    /// –ú–æ–¥—É–ª—å —à–∏—Ñ—Ä–æ—Ç–µ–∫—Å—Ç–∞ —Å–ª–µ–¥—É–µ—Ç —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∫–∞–∫:
    /// Q = q_0 * q_1 * ... * q_n * q'
    /// –≥–¥–µ q_0 - –ø–µ—Ä–≤–∞—è –ø—Ä–æ—Å—Ç–∞—è, –∞ –µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏—Ç–æ–≤ —Ä–∞–≤–Ω–æ firstModSize
    /// –û—Å—Ç–∞–ª—å–Ω—ã–µ q_i –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏—Ç–æ–≤ –∏ —Ä–∞–≤–Ω—ã scalingModSize
    /// –ü—Ä–æ—Å—Ç–æ–µ q' –Ω–µ –∑–∞–¥–∞–µ—Ç—Å—è —è–≤–Ω–æ, –Ω–æ –æ–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ —Å—Ö–µ–º CKKS –∏ BGV (–≤ –º–µ—Ç–æ–¥–∞—Ö –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è *EXT)
    ///
    /// üá¨üáß firstModSize and scalingModSize are used to calculate ciphertext modulus. The ciphertext modulus should be seen as:
    /// Q = q_0 * q_1 * ... * q_n * q'
    /// where q_0 is first prime, and it's number of bits is firstModSize
    /// other q_i have same number of bits and is equal to scalingModSize
    /// the prime q' is not explicitly given,
    /// but it is used internally in CKKS and BGV schemes (in *EXT scaling methods)
    first_mod_size: u32,
    scaling_mod_size: u32,

    /// üá∑üá∫ —Å–º. KeySwitchTechnique - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –∫–ª—é—á–µ–π HYBRID
    /// üá¨üáß see KeySwitchTechnique - number of digits in HYBRID key switching
    num_large_digits: u32,

    /// üá∑üá∫ –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–∏–≤–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ (–≥–ª—É–±–∏–Ω–∞ —É–º–Ω–æ–∂–µ–Ω–∏—è?)
    /// üá¨üáß multiplicative depth
    multiplicative_depth: u32,

    /// üá∑üá∫ –£—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:
    /// –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ –∞–¥—Ä–µ—Å—É
    /// http://homomorphicencryption.org/wp-content/uploads/2018/11/HomomorphicEncryptionStandardv1.1.pdf
    /// –î–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ –∫–æ–ª—å—Ü–∞ –∏ —É—Ä–æ–≤–Ω—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –º—ã –∏–º–µ–µ–º –≤–µ—Ä—Ö–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É
    /// –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ –º–æ–¥—É–ª—è (Q –¥–ª—è BV –∏–ª–∏ P*Q –¥–ª—è HYBRID).

    /// üá¨üáß security level:
    /// We use the values from the security standard  at
    /// http://homomorphicencryption.org/wp-content/uploads/2018/11/HomomorphicEncryptionStandardv1.1.pdf
    /// For given ring dimension and security level we have
    /// upper bound of possible highest modulus (Q for BV or P*Q for HYBRID)
    security_level: SecurityLevel,

    /// üá∑üá∫ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –∫–æ–ª—å—Ü–∞ N —Å—Ö–µ–º—ã: –∫–æ–ª—å—Ü–æ —Ä–∞–≤–Ω–æ Z_Q[x] / (X^N+1)
    /// üá¨üáß ring dimension N of the scheme : the ring is Z_Q[x] / (X^N+1)
    ring_dimension: u32,

    /// üá∑üá∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à—É–º–∞ –≤ BGV –∏ BFV)
    /// üá¨üáß number of additions (used for setting noise in BGV and BFV)
    eval_add_count: u32,

    /// üá∑üá∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∞–≤–∏—à (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à—É–º–∞ –≤ BGV –∏ BFV)
    /// üá¨üáß number of key switching operations (used for setting noise in BGV and BFV)
    key_switch_count: u32,

    /// üá∑üá∫ —Ä–∞–∑–º–µ—Ä –º–æ–¥—É–ª–µ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –¥–ª—è PRE –≤ –¥–æ–∫–∞–∑—ã–≤–∞–µ–º–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–µ HRA
    /// üá¨üáß size of moduli used for PRE in the provable HRA setting
    multi_hop_mod_size: u32,

    /// üá∑üá∫ –°–¢–ê–ù–î–ê–†–¢–ù–´–ô –∏–ª–∏ –†–ê–°–®–ò–†–ï–ù–ù–´–ô —Ä–µ–∂–∏–º –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è BFV
    /// EXTENDED –Ω–µ–º–Ω–æ–≥–æ —É–º–µ–Ω—å—à–∞–µ—Ç —Ä–∞–∑–º–µ—Ä Q (–Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–∏—Ç),
    /// –Ω–æ –¥–µ–ª–∞–µ—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ–¥–ª–µ–Ω–Ω–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Å–º. https://eprint.iacr.org/2022/915
    ///
    /// üá¨üáß STANDARD or EXTENDED mode for BFV encryption
    /// EXTENDED slightly reduces the size of Q (by few bits) but makes encryption somewhat slower
    /// see https://eprint.iacr.org/2022/915 for details
    encryption_technique: EncryptionTechnique,

    /// üá∑üá∫ –º–µ—Ç–æ–¥ —É–º–Ω–æ–∂–µ–Ω–∏—è –≤ BFV: BEHZ, HPS –∏ —Ç.–¥.
    /// –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Å–º. https://eprint.iacr.org/2022/915
    ///
    /// üá¨üáß multiplication method in BFV: BEHZ, HPS, etc.
    /// see https://eprint.iacr.org/2022/915 for details
    multiplication_technique: MultiplicationTechnique,

    /// üá∑üá∫ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –º–Ω–æ–≥–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä –±—É—Ç—Å—Ç—Ä–∞–ø–∏–Ω–≥–∞
    /// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–µ–ø–µ–Ω–∏ —Å–∂–∞—Ç–∏—è —à–∏—Ñ—Ä–æ—Ç–µ–∫—Å—Ç–∞ (SLACK –∏–ª–∏ COMPACT)
    /// SLACK –∏–º–µ–µ—Ç –±–æ–ª–µ–µ —Å–ª–∞–±—ã–µ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏—è –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –ø–æ—ç—Ç–æ–º—É –º–µ–Ω–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω
    /// COMPACT –∏–º–µ–µ—Ç –±–æ–ª–µ–µ —Å–∏–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏—è –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –ø–æ—ç—Ç–æ–º—É –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω
    ///
    /// üá¨üáß Interactive multi-party bootstrapping parameter
    /// Set the compression level in ciphertext (SLACK or COMPACT)
    /// SLACK has weaker security assumption, thus less efficient
    /// COMPACT has stronger security assumption, thus more efficient
    interactive_boot_compression_level: CompressionLevel,
}

impl SchemeParameters {
    pub fn new(scheme: FHEScheme) -> Self {
        let mut parameters = Self::default();
        parameters.set_to_defaults(scheme).expect("Unable to initialize scheme parameters");
        parameters
    }

    pub fn set_to_defaults(&mut self, scheme: FHEScheme) -> Result<(), FHEError> {
        match scheme {
            FHEScheme::CKKSRNS => {
                let _ = mem::replace(
                    self,
                    Self {
                        scheme,
                        plain_text_modulus: 0,
                        digit_size: 0,
                        standard_deviation: 3.19,
                        secret_key_distribution: SecretKeyDistribution::UniformTernary,
                        max_relinearization_secret_key_degree: 2,
                        key_switch_technique: KeySwitchTechnique::HYBRID,
                        scaling_technique: ScalingTechnique::FlexibleAutoExt,
                        batch_size: 0,
                        proxy_reencryption_mode: Some(ProxyReEncryptionMode::InDCPA),
                        multiparty_mode: MultipartyMode::FixedNoiseMultiparty,
                        execution_mode: ExecutionMode::Evaluation,
                        decryption_noise_mode: DecryptionNoiseMode::FixedNoiseDecrypt,
                        noise_estimate: 0.0,
                        desired_precision: 25.0,
                        statistical_security: 30,
                        num_adversarial_queries: 1,
                        threshold_num_of_parties: 1,
                        first_mod_size: 60,
                        scaling_mod_size: 59,
                        num_large_digits: 0,
                        multiplicative_depth: 1,
                        security_level: SecurityLevel::HEstd128Classic,
                        ring_dimension: 0,
                        eval_add_count: 0,
                        key_switch_count: 0,
                        multi_hop_mod_size: 0,
                        encryption_technique: EncryptionTechnique::STANDARD,
                        multiplication_technique: MultiplicationTechnique::HPS,
                        interactive_boot_compression_level: CompressionLevel::Slack,
                    },
                );
            }
            FHEScheme::BFVRNS => {
                let _ = mem::replace(
                    self,
                    Self {
                        scheme,
                        plain_text_modulus: 0,
                        digit_size: 0,
                        standard_deviation: 3.19,
                        secret_key_distribution: SecretKeyDistribution::UniformTernary,
                        max_relinearization_secret_key_degree: 2,
                        key_switch_technique: KeySwitchTechnique::BV,
                        scaling_technique: ScalingTechnique::NoRescale,
                        batch_size: 0,
                        proxy_reencryption_mode: Some(ProxyReEncryptionMode::InDCPA),
                        multiparty_mode: MultipartyMode::FixedNoiseMultiparty,
                        execution_mode: ExecutionMode::Evaluation,
                        decryption_noise_mode: DecryptionNoiseMode::FixedNoiseDecrypt,
                        noise_estimate: 0.0,
                        desired_precision: 0.0,
                        statistical_security: 30,
                        num_adversarial_queries: 1,
                        threshold_num_of_parties: 1,
                        first_mod_size: 60,
                        scaling_mod_size: 60,
                        num_large_digits: 0,
                        multiplicative_depth: 1,
                        security_level: SecurityLevel::HEstd128Classic,
                        ring_dimension: 0,
                        eval_add_count: 0,
                        key_switch_count: 0,
                        multi_hop_mod_size: 0,
                        encryption_technique: EncryptionTechnique::STANDARD,
                        multiplication_technique: MultiplicationTechnique::HPSPOVERQLEVELED,
                        interactive_boot_compression_level: CompressionLevel::Slack,
                    },
                );
            }
            FHEScheme::BGVRNS => {
                let _ = mem::replace(
                    self,
                    Self {
                        scheme,
                        plain_text_modulus: 0,
                        digit_size: 0,
                        standard_deviation: 3.19,
                        secret_key_distribution: SecretKeyDistribution::UniformTernary,
                        max_relinearization_secret_key_degree: 2,
                        key_switch_technique: KeySwitchTechnique::HYBRID,
                        scaling_technique: ScalingTechnique::FlexibleAutoExt,
                        batch_size: 0,
                        proxy_reencryption_mode: Some(ProxyReEncryptionMode::InDCPA),
                        multiparty_mode: MultipartyMode::FixedNoiseMultiparty,
                        execution_mode: ExecutionMode::Evaluation,
                        decryption_noise_mode: DecryptionNoiseMode::FixedNoiseDecrypt,
                        noise_estimate: 0.0,
                        desired_precision: 0.0,
                        statistical_security: 30,
                        num_adversarial_queries: 1,
                        threshold_num_of_parties: 1,
                        first_mod_size: 0,
                        scaling_mod_size: 0,
                        num_large_digits: 0,
                        multiplicative_depth: 1,
                        security_level: SecurityLevel::HEstd128Classic,
                        ring_dimension: 0,
                        eval_add_count: 5,
                        key_switch_count: 3,
                        multi_hop_mod_size: 0,
                        encryption_technique: EncryptionTechnique::STANDARD,
                        multiplication_technique: MultiplicationTechnique::HPS,
                        interactive_boot_compression_level: CompressionLevel::Slack,
                    },
                );
            }
        }
        Ok(())
    }

    fn validate_ring_dimension(ring_dimension: u32) -> Result<(), FHEError> {
        if !ring_dimension.is_power_of_two() {
            Err(FHEError::InvalidRingDimension(ring_dimension))?;
        }
        Ok(())
    }

    fn validate_multiplicative_depth(multiplicative_depth: u32) -> Result<(), FHEError> {
        const MAX_MULTIPLICATIVE_DEPTH_VALUE: u32 = 1000;
        if multiplicative_depth > MAX_MULTIPLICATIVE_DEPTH_VALUE {
            Err(FHEError::InvalidMultiplicativeDepth(multiplicative_depth))?;
        }
        Ok(())
    }

    // getters
    pub fn scheme(&self) -> FHEScheme {
        self.scheme
    }

    pub fn plaintext_modulus(&self) -> PlaintextModulus {
        self.plain_text_modulus
    }

    pub fn digit_size(&self) -> u32 {
        self.digit_size
    }

    pub fn standard_deviation(&self) -> f64 {
        self.standard_deviation
    }

    pub fn secret_key_dist(&self) -> SecretKeyDistribution {
        self.secret_key_distribution
    }

    pub fn max_relinearization_secret_key_degree(&self) -> u32 {
        self.max_relinearization_secret_key_degree
    }

    pub fn key_switch_technique(&self) -> KeySwitchTechnique {
        self.key_switch_technique
    }

    pub fn scaling_technique(&self) -> ScalingTechnique {
        self.scaling_technique
    }

    pub fn batch_size(&self) -> u32 {
        self.batch_size
    }

    pub fn proxy_reencryption_mode(&self) -> Option<ProxyReEncryptionMode> {
        self.proxy_reencryption_mode
    }

    pub fn multiparty_mode(&self) -> MultipartyMode {
        self.multiparty_mode
    }

    pub fn execution_mode(&self) -> ExecutionMode {
        self.execution_mode
    }

    pub fn decryption_noise_mode(&self) -> DecryptionNoiseMode {
        self.decryption_noise_mode
    }

    pub fn noise_estimate(&self) -> f64 {
        self.noise_estimate
    }

    pub fn desired_precision(&self) -> f64 {
        self.desired_precision
    }

    pub fn statistical_security(&self) -> u32 {
        self.statistical_security
    }

    pub fn num_adversarial_queries(&self) -> u32 {
        self.num_adversarial_queries
    }

    pub fn threshold_num_of_parties(&self) -> u32 {
        self.threshold_num_of_parties
    }

    pub fn first_mod_size(&self) -> u32 {
        self.first_mod_size
    }

    pub fn scaling_mod_size(&self) -> u32 {
        self.scaling_mod_size
    }

    pub fn num_large_digits(&self) -> u32 {
        self.num_large_digits
    }

    pub fn multiplicative_depth(&self) -> u32 {
        self.multiplicative_depth
    }

    pub fn security_level(&self) -> SecurityLevel {
        self.security_level
    }

    pub fn ring_dimension(&self) -> u32 {
        self.ring_dimension
    }

    pub fn eval_add_count(&self) -> u32 {
        self.eval_add_count
    }

    pub fn key_switch_count(&self) -> u32 {
        self.key_switch_count
    }

    pub fn multi_hop_mod_size(&self) -> u32 {
        self.multi_hop_mod_size
    }

    pub fn encryption_technique(&self) -> EncryptionTechnique {
        self.encryption_technique
    }

    pub fn multiplication_technique(&self) -> MultiplicationTechnique {
        self.multiplication_technique
    }

    pub fn interactive_boot_compression_level(&self) -> CompressionLevel {
        self.interactive_boot_compression_level
    }

    // setters
    pub fn set_scheme(&mut self, scheme: FHEScheme) -> Result<(), FHEError> {
        self.scheme = scheme;
        Ok(())
    }

    pub fn set_plaintext_modulus(
        &mut self,
        plaintext_modulus: PlaintextModulus,
    ) -> Result<(), FHEError> {
        self.plain_text_modulus = plaintext_modulus;
        Ok(())
    }

    pub fn set_digit_size(&mut self, digit_size: u32) -> Result<(), FHEError> {
        self.digit_size = digit_size;
        Ok(())
    }

    pub fn set_standard_deviation(&mut self, standard_deviation: f64) -> Result<(), FHEError> {
        self.standard_deviation = standard_deviation;
        Ok(())
    }

    pub fn set_secret_key_dist(
        &mut self,
        secret_key_dist: SecretKeyDistribution,
    ) -> Result<(), FHEError> {
        self.secret_key_distribution = secret_key_dist;
        Ok(())
    }

    pub fn set_max_relinearization_secret_key_degree(
        &mut self,
        max_relinearization_secret_key_degree: u32,
    ) -> Result<(), FHEError> {
        self.max_relinearization_secret_key_degree = max_relinearization_secret_key_degree;
        Ok(())
    }

    pub fn set_key_switch_technique(
        &mut self,
        key_switch_technique: KeySwitchTechnique,
    ) -> Result<(), FHEError> {
        self.key_switch_technique = key_switch_technique;
        Ok(())
    }

    pub fn set_scaling_technique(
        &mut self,
        scaling_technique: ScalingTechnique,
    ) -> Result<(), FHEError> {
        self.scaling_technique = scaling_technique;
        Ok(())
    }

    pub fn set_batch_size(&mut self, batch_size: u32) -> Result<(), FHEError> {
        self.batch_size = batch_size;
        Ok(())
    }

    pub fn set_proxy_reencryption_mode(
        &mut self,
        proxy_reencryption_mode: Option<ProxyReEncryptionMode>,
    ) -> Result<(), FHEError> {
        self.proxy_reencryption_mode = proxy_reencryption_mode;
        Ok(())
    }

    pub fn set_multiparty_mode(&mut self, multiparty_mode: MultipartyMode) -> Result<(), FHEError> {
        self.multiparty_mode = multiparty_mode;
        Ok(())
    }

    pub fn set_execution_mode(&mut self, execution_mode: ExecutionMode) -> Result<(), FHEError> {
        self.execution_mode = execution_mode;
        Ok(())
    }

    pub fn set_decryption_noise_mode(
        &mut self,
        decryption_noise_mode: DecryptionNoiseMode,
    ) -> Result<(), FHEError> {
        self.decryption_noise_mode = decryption_noise_mode;
        Ok(())
    }

    pub fn set_noise_estimate(&mut self, noise_estimate: f64) -> Result<(), FHEError> {
        self.noise_estimate = noise_estimate;
        Ok(())
    }

    pub fn set_desired_precision(&mut self, desired_precision: f64) -> Result<(), FHEError> {
        self.desired_precision = desired_precision;
        Ok(())
    }

    pub fn set_statistical_security(&mut self, statistical_security: u32) -> Result<(), FHEError> {
        self.statistical_security = statistical_security;
        Ok(())
    }

    pub fn set_num_adversarial_queries(
        &mut self,
        num_adversarial_queries: u32,
    ) -> Result<(), FHEError> {
        self.num_adversarial_queries = num_adversarial_queries;
        Ok(())
    }

    pub fn set_threshold_num_of_parties(
        &mut self,
        threshold_num_of_parties: u32,
    ) -> Result<(), FHEError> {
        self.threshold_num_of_parties = threshold_num_of_parties;
        Ok(())
    }

    pub fn set_first_mod_size(&mut self, first_mod_size: u32) -> Result<(), FHEError> {
        self.first_mod_size = first_mod_size;
        Ok(())
    }

    pub fn set_scaling_mod_size(&mut self, scaling_mod_size: u32) -> Result<(), FHEError> {
        self.scaling_mod_size = scaling_mod_size;
        Ok(())
    }

    pub fn set_num_large_digits(&mut self, num_large_digits: u32) -> Result<(), FHEError> {
        self.num_large_digits = num_large_digits;
        Ok(())
    }

    pub fn set_multiplicative_depth(&mut self, multiplicative_depth: u32) -> Result<(), FHEError> {
        // TODO (dsuponit): move the check below ValidateMultiplicativeDepth() to a separate validating function. see
        // https://github.com/openfheorg/openfhe-development/issues/400
        Self::validate_multiplicative_depth(multiplicative_depth)?;
        self.multiplicative_depth = multiplicative_depth;
        Ok(())
    }

    pub fn set_security_level(&mut self, security_level: SecurityLevel) -> Result<(), FHEError> {
        self.security_level = security_level;
        Ok(())
    }

    pub fn set_ring_dimension(&mut self, ring_dimension: u32) -> Result<(), FHEError> {
        // TODO (dsuponit): move the check below ValidateRingDim() to a separate validating function. see
        // https://github.com/openfheorg/openfhe-development/issues/400
        Self::validate_ring_dimension(ring_dimension)?;
        self.ring_dimension = ring_dimension;
        Ok(())
    }

    pub fn set_eval_add_count(&mut self, eval_add_count: u32) -> Result<(), FHEError> {
        self.eval_add_count = eval_add_count;
        Ok(())
    }

    pub fn set_key_switch_count(&mut self, key_switch_count: u32) -> Result<(), FHEError> {
        self.key_switch_count = key_switch_count;
        Ok(())
    }

    pub fn set_multi_hop_mod_size(&mut self, multi_hop_mod_size: u32) -> Result<(), FHEError> {
        self.multi_hop_mod_size = multi_hop_mod_size;
        Ok(())
    }

    pub fn set_encryption_technique(
        &mut self,
        encryption_technique: EncryptionTechnique,
    ) -> Result<(), FHEError> {
        self.encryption_technique = encryption_technique;
        Ok(())
    }

    pub fn set_multiplication_technique(
        &mut self,
        multiplication_technique: MultiplicationTechnique,
    ) -> Result<(), FHEError> {
        self.multiplication_technique = multiplication_technique;
        Ok(())
    }
}

pub type Params = SchemeParameters;

#[derive(Default, Clone, Copy, Debug, PartialEq, Eq)]
pub enum SecretKeyDistribution {
    Gaussian = 0,
    // UNIFORM_BINARY,
    #[default]
    UniformTernary = 1,
    SparseTernary = 2,
    // UNIFORM_QUATERNARY,
    // UNIFORM_QUINARY,
}

#[derive(Default, Clone, Copy, Debug, PartialEq, Eq)]
pub enum KeySwitchTechnique {
    Invalid = 0,
    BV,
    #[default]
    HYBRID,
}

#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum ProxyReEncryptionMode {
    InDCPA,
    FixedNoiseHRA,
    NoiseFloodingHRA,
    DivideAndRoundHRA,
}

#[derive(Default, Clone, Copy, Debug, PartialEq, Eq)]
pub enum MultipartyMode {
    InvalidMultipartyMode = 0,
    #[default]
    FixedNoiseMultiparty,
    NoiseFloodingMultiparty,
}

#[derive(Default, Clone, Copy, Debug, PartialEq, Eq)]
pub enum ExecutionMode {
    #[default]
    Evaluation = 0,
    NoiseEstimation,
}

#[derive(Default, Clone, Copy, Debug, PartialEq, Eq)]
pub enum DecryptionNoiseMode {
    #[default]
    FixedNoiseDecrypt = 0,
    NoiseFloodingDecrypt,
}

#[derive(Default, Clone, Copy, Debug, PartialEq, Eq)]
pub enum SecurityLevel {
    #[default]
    HEstd128Classic,
    HEstd192Classic,
    HEstd256Classic,
    HEstd128Quantum,
    HEstd192Quantum,
    HEstd256Quantum,
    HEstdNotSet,
}

#[derive(Default, Clone, Copy, Debug, PartialEq, Eq)]
pub enum EncryptionTechnique {
    #[default]
    STANDARD = 0,
    EXTENDED,
}

#[derive(Default, Clone, Copy, Debug, PartialEq, Eq)]
pub enum MultiplicationTechnique {
    BEHZ = 0,
    #[default]
    HPS,
    HPSPOVERQ,
    HPSPOVERQLEVELED,
}

/// üá∑üá∫ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è, –¥–æ –∫–æ—Ç–æ—Ä–æ–≥–æ –¥–æ–≤–æ–¥–∏—Ç—Å—è –≤—Ö–æ–¥–Ω–æ–π —à–∏—Ñ—Ä–æ—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥
/// –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º –º–Ω–æ–≥–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–º –±—É—Ç—Å—Ç—Ä–∞–ø–∏–Ω–≥–æ–º
/// üá¨üáß Defining the level to which the input ciphertext is brought to before
/// interactive multi-party bootstrapping
#[derive(Default, Clone, Copy, Debug, PartialEq, Eq)]
pub enum CompressionLevel {
    // we don't support 0 or 1 compression levels
    // do not change values here
    Compact = 2, // more efficient with stronger security assumption
    #[default]
    Slack = 3, // less efficient with weaker security assumption
}

// mod libcrypto {
// pub struct CryptoContextCKKSRNS;

// impl CryptoContextCKKSRNS {
//     pub type ContextType = CryptoContext<Element>;
//     pub type Factory = CryptoContextFactory<Element>;
//     pub type PublicKeyEncryptionScheme = SchemeCKKSRNS;
//     pub type CryptoParams = CryptoParametersCKKSRNS;
//     pub type Element = DCRTPoly;

//     pub fn gen_crypto_context(parameters: &CCParams<CryptoContextCKKSRNS>) -> CryptoContext<Element> {
//         gen_crypto_context_ckksrns_internal::<CryptoContextCKKSRNS, Element>(parameters)
//     }
// }
// }

// trait CryptoContext {
//     type Element; //                    = DCRTPoly;
//     type ContextType; //                = CryptoContext<Element>;  // required by GenCryptoContext() in gen-cryptocontext.h
//     type Factory; //                    = CryptoContextFactory<Element>;
//     type PublicKeyEncryptionScheme; //  = SchemeCKKSRNS;
//     type CryptoParams; /// .
//     //               = CryptoParametersCKKSRNS;

//     fn genCryptoContext<CryptoContextCKKSRNS>(parameters: &CCParams<CryptoContextCKKSRNS>) -> Rc<CryptoContextement> {
//         genCryptoContextCKKSRNSInternal<CryptoContextCKKSRNS, Element>(parameters);
//     }
// }

// pub struct CCParams<CryptoContext> {
//     params: SchemeParameters,
// }
