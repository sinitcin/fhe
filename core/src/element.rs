//==================================================================================
// BSD 2-Clause License
//
// Copyright (c) 2014-2023, NJIT, Duality Technologies Inc. and other contributors
//            translated from C++ and upgraded by Anton Sinitsyn
//
// All rights reserved.
//
// Author TPOC: contact@openfhe.org
// Anton Sinitsyn: antonsinitsyn@outlook.de
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//==================================================================================

/*
    üá∑üá∫ –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∏ –∑–∞–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö —Ä–µ—à–µ—Ç–æ–∫ –≤ OpenFHE
    üá¨üáß Represents and defines integer lattice element objects in OpenFHE
*/

use std::ops::{Add, AddAssign, Index, IndexMut, Mul, MulAssign, Neg, Sub, SubAssign};

pub struct DiscreteGaussianGeneratorImpl<X> {
    _phantom: std::marker::PhantomData<X>,
}

pub struct Format;

/// üá∑üá∫ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∏–¥–µ–∞–ª—å–Ω—ã—Ö —Ä–µ—à–µ—Ç–æ–∫
///
/// –ö–∞–∂–¥–∞—è —Ä–µ—à–µ—Ç–∫–∞ –¥–æ–ª–∂–Ω–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —ç—Ç–∏ —á–∏—Å—Ç—ã–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã
/// –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å OpenFHE PKE. Element - —ç—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π
/// —Ç–∏–ø –¥–ª—è –≤—Å–µ—Ö —ç—Ç–∏—Ö –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π. –í –±–∞–∑–æ–≤–æ–º –∫–ª–∞—Å—Å–µ –∑–¥–µ—Å—å –Ω–µ—Ç –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞;
/// –æ–Ω –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è
///
/// üá¨üáß Interface for ideal lattices
///
/// Every lattice must implement these pure virtual functions in order to properly
/// interoperate with OpenFHE PKE. Element is the return type for all of these
/// virtual functions. There is no constructor here in the base class; it
/// contains no data to construct.
pub trait ILElement<Idx>:
    // üá∑üá∫ –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–∏–ø–∞–∂ –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    // üá¨üáß Standard clone
    Clone +

    // üá∑üá∫ –û–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–∞.
    // –ü–∞—Ä–∞–º–µ—Ç—Ä: element —ç–ª–µ–º–µ–Ω—Ç, —Å –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ —Å—Ä–∞–≤–Ω–∏—Ç—å.
    // üá¨üáß Inequality operator.  Compares values of element to be compared to.
    // Param element the element to compare to.

    // üá∑üá∫ –û–ø–µ—Ä–∞—Ç–æ—Ä —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞.  –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞, —Å –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ —Å—Ä–∞–≤–Ω–∏—Ç—å.
    // –ü–∞—Ä–∞–º–µ—Ç—Ä: element —ç–ª–µ–º–µ–Ω—Ç, —Å –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ —Å—Ä–∞–≤–Ω–∏—Ç—å.
    // üá¨üáß Equality operator.  Compares values of element to be compared to.
    // Param element the element to compare to.
    Eq +

    // üá∑üá∫ –£–Ω–∞—Ä–Ω–æ–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ –Ω–∞ —Ä–µ—à–µ—Ç–∫–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: -—Ä–µ—à–µ—Ç–∫–∞ 
    // üá¨üáß Unary negation on a lattice. Return -lattice
    Neg +

    // üá∑üá∫ –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:
    //
    // 1) –°–∫–∞–ª—è—Ä–Ω–æ–µ —Å–ª–æ–∂–µ–Ω–∏–µ - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Ç–æ–ª—å–∫–æ –∫ –ø–µ—Ä–≤–æ–º—É –∏–Ω–¥–µ–∫—Å—É.
    // –≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –¥–æ–ø—É—Å—Ç–∏–º–∞ —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ COEFFICIENT.
    // –ü–∞—Ä–∞–º–µ—Ç—Ä: element - —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ –∏–Ω–¥–µ–∫—Å—É.
    // –†–µ–∑—É–ª—å—Ç–∞—Ç: –≤–æ–∑–≤—Ä–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–ª–æ–∂–µ–Ω–∏—è.
    // 
    // 2) –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é —Å–ª–æ–∂–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    // –ü–∞—Ä–∞–º–µ—Ç—Ä: element - —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Å–ª–æ–∂–µ–Ω–∏—è.
    // –†–µ–∑—É–ª—å—Ç–∞—Ç: –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–æ–∂–µ–Ω–∏—è.
    // 
    // üá¨üáß Must be implemented a couple of types of additions:
    // 
    // 1) Scalar addition - add an element to the first index only.
    // This operation is only allowed in COEFFICIENT format.
    // Parameter: element is the element to add entry-wise.
    // Return is the value of the addition operation.
    //
    // 2) Performs an addition operation and returns the result.
    // Parameter: element is the element to add with.
    // Return is the value of the addition.
    Add +

    // üá∑üá∫ –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:
    // 1) –°–∫–∞–ª—è—Ä–Ω–æ–µ –≤—ã—á–∏—Ç–∞–Ω–∏–µ - –≤—ã—á–∏—Ç–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ frp, –≤—Å–µ –∑–∞–ø–∏—Å–∏.
    // Parameter: element - —ç–ª–µ–º–µ–Ω—Ç, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –≤—ã—á–µ—Å—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏.
    // @return - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã—á–∏—Ç–∞–Ω–∏—è.
    //
    // 2) –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é –≤—ã—á–∏—Ç–∞–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    // –ü–∞—Ä–∞–º–µ—Ç—Ä: element - —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –≤—ã—á–∏—Ç–∞–Ω–∏—è.
    // –†–µ–∑—É–ª—å—Ç–∞—Ç: –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã—á–∏—Ç–∞–Ω–∏—è.
    //
    // üá¨üáß Must be implemented a couple of types of subtractions:
    // 1) Scalar subtraction - subtract an element frp, all entries.
    // Parameter: element is the element to subtract entry-wise.
    // Return is the value of the minus operation.
    //
    // 2) Performs a subtraction operation and returns the result.
    // Parameter: element is the element to subtract with.
    // Return is the value of the subtraction.
    Sub +

    // üá∑üá∫ –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:
    //
    // 1) –°–∫–∞–ª—è—Ä–Ω–æ–µ —É–º–Ω–æ–∂–µ–Ω–∏–µ - –ø–µ—Ä–µ–º–Ω–æ–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π.
    // –ü–∞—Ä–∞–º–µ—Ç—Ä: element - —ç–ª–µ–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–º–Ω–æ–∂–∏—Ç—å –Ω–∞ –∑–Ω–∞–∫–æ–≤–æ–µ —Ü–µ–ª–æ–µ.
    // –†–µ–∑—É–ª—å—Ç–∞—Ç: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —É–º–Ω–æ–∂–µ–Ω–∏—è.
    //
    // 2) –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é —É–º–Ω–æ–∂–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    // –ü–∞—Ä–∞–º–µ—Ç—Ä: element - —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —É–º–Ω–æ–∂–µ–Ω–∏—è.
    // –†–µ–∑—É–ª—å—Ç–∞—Ç: –∑–Ω–∞—á–µ–Ω–∏–µ —É–º–Ω–æ–∂–µ–Ω–∏—è.
    //
    // üá¨üáß Must be a couple of implementations:
    //
    // 1) Scalar multiplication - multiply all entries.
    // Parameter: element is the element to multiply entry-wise.
    // Return is the value of the times operation.
    //
    // 2) Performs a multiplication operation and returns the result.
    // Parameter: element is the element to multiply with.
    // Return is the value of the multiplication.
    Mul +

    // üá∑üá∫ –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:
    //
    // 1) –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é += —Å BigInteger –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    // –ü–∞—Ä–∞–º–µ—Ç—Ä: element - —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.
    // –†–µ–∑—É–ª—å—Ç–∞—Ç: —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–æ–∂–µ–Ω–∏—è.
    //
    // 2) –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é —Å–ª–æ–∂–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    // –ü–∞—Ä–∞–º–µ—Ç—Ä: element - —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.
    // –†–µ–∑—É–ª—å—Ç–∞—Ç: –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–æ–∂–µ–Ω–∏—è.
    //
    // üá¨üáß Must be a couple of implementations:
    //
    // 1) Performs += operation with a BigInteger and returns the result.
    // Parameter: element is the element to add
    // Return is the value of the addition.
    //
    // 2) Performs an addition operation and returns the result.
    // Parameter: element is the element to add
    // Return is the value of the addition.
    AddAssign +

    // üá∑üá∫ –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:
    //
    // 1) –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é -= —Å BigInteger –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    // –ü–∞—Ä–∞–º–µ—Ç—Ä: element - —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –≤—ã—á–∏—Ç–∞–Ω–∏—è.
    // –†–µ–∑—É–ª—å—Ç–∞—Ç: –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–æ–∂–µ–Ω–∏—è.
    //
    // 2) –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é –≤—ã—á–∏—Ç–∞–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    // –ü–∞—Ä–∞–º–µ—Ç—Ä: element - —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –≤—ã—á–∏—Ç–∞–Ω–∏—è.
    // –†–µ–∑—É–ª—å—Ç–∞—Ç: –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–æ–∂–µ–Ω–∏—è.
    //
    // üá¨üáß Must be a couple of implementations:
    //
    // 1) Performs -= operation with a BigInteger and returns the result.
    // Parameter: element is the element to subtract
    // Return is the value of the addition.
    //
    // 2) Performs an subtraction operation and returns the result.
    // Parameter: element is the element to subtract
    // Return is the value of the addition.
    SubAssign +

    // üá∑üá∫ –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:
    //
    // 1) –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é *= —Å BigInteger –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    // –ü–∞—Ä–∞–º–µ—Ç—Ä: element - —ç–ª–µ–º–µ–Ω—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–º–Ω–æ–∂–∏—Ç—å.
    // –†–µ–∑—É–ª—å—Ç–∞—Ç: –∑–Ω–∞—á–µ–Ω–∏–µ —É–º–Ω–æ–∂–µ–Ω–∏—è.
    //
    // 2) –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é —É–º–Ω–æ–∂–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    //
    // –ü–∞—Ä–∞–º–µ—Ç—Ä: element - —ç–ª–µ–º–µ–Ω—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–º–Ω–æ–∂–∏—Ç—å.
    // –†–µ–∑—É–ª—å—Ç–∞—Ç: –∑–Ω–∞—á–µ–Ω–∏–µ —É–º–Ω–æ–∂–µ–Ω–∏—è.
    //
    // üá¨üáß Must be a couple of implementations:
    //
    // 1) Performs *= operation with a BigInteger and returns the result.
    // Parameter: element is the element to multiply by
    // Return is the value of the multiplication.
    //
    // 2) Performs an multiplication operation and returns the result.
    // Parameter: element is the element to multiply by
    // Return is the value of the multiplication.
    MulAssign +

    // üá∑üá∫ –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —ç–ª–µ–º–µ–Ω—Ç–µ –ø–æ –∏–Ω–¥–µ–∫—Å—É. –≠—Ç–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö 
    // –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤, –ø–æ—ç—Ç–æ–º—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é  –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –∏—Å–∫–ª—é—á–µ–Ω–∏–µ.
    // üá¨üáß Gets the Value in the Element that is At Index and returns it.
    // This is only implemented for some derived classes, so the default implementation 
    // throws an exception
    Index<Idx> + IndexMut<Idx>
    where Idx: ?Sized,
    {
    type Element;
    type VecType;
    type IntType;

    /// üá∑üá∫ –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞, –Ω–æ —á—Ç–æ–±—ã –æ–Ω –Ω–∏—á–µ–≥–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞–ª
    /// üá¨üáß Clone the object, but have it contain nothing
    fn clone_empty(&self) -> Self::Element;

    /// üá∑üá∫ –ö–ª–æ–Ω–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–ª–µ–º–µ–Ω—Ç–∞, –æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–µ–∫—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≤ 0
    /// üá¨üáß Clones the element's parameters, leaves vector initialized to 0. 
    fn clone_parameters_only(&self) -> Self::Element;

    /// üá∑üá∫ –ö–ª–æ–Ω–∏—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏ —à—É–º–æ–º –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∞
    /// üá¨üáß Clones the element with parameters and with noise for the vector
    fn clone_with_noise(
        &self,
        dgg: &DiscreteGaussianGeneratorImpl<Self::VecType>,
        format: Format,
    ) -> Self::Element;

    // üá∑üá∫ –û–ø–µ—Ä–∞—Ç–æ—Ä—ã –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è
    // üá¨üáß Assignment operators

    /// üá∑üá∫ –û–ø–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è, –∫–æ–ø–∏—Ä—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç—ã.
    /// üá¨üáß Assignment operator that copies elements.
    fn assign(&self, rhs: &Self::Element) -> &Self::Element;

    /// üá∑üá∫ –û–ø–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è, –∫–æ–ø–∏—Ä—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç—ã.
    /// üá¨üáß Assignment operator that copies elements.
    fn assign_move(&self, rhs: &Self::Element) -> &Self::Element;

    /// üá∑üá∫ –û–ø–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è, –∫–æ–ø–∏—Ä—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç—ã.
    /// üá¨üáß Assignment operator that copies elements.
    fn assign_initializer_list(&self, rhs: Vec<u64>) -> &Self::Element;

    // üá∑üá∫ –§—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    // üá¨üáß GETTERS

    /// üá∑üá∫ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ —ç–ª–µ–º–µ–Ω—Ç–∞. –§–æ—Ä–º–∞—Ç - COEFFICIENT –∏–ª–∏ EVALUATION
    /// üá¨üáß Get format of the element. Format is either COEFFICIENT or EVALUATION
    fn get_format(&self) -> Format;

    /// üá∑üá∫ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —ç–ª–µ–º–µ–Ω—Ç–∞.
    /// üá¨üáß Get the length of the element.
    fn get_length(&self) -> usize;

    /// üá∑üá∫ –ü–æ–ª—É—á–∏—Ç—å –º–æ–¥—É–ª—å —ç–ª–µ–º–µ–Ω—Ç–∞
    /// üá¨üáß Get modulus of the element
    fn get_modulus(&self) -> &Self::IntType;

    /// üá∑üá∫ –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞
    /// üá¨üáß Get the values for the element
    fn get_values(&self) -> &Self::VecType;

    /// üá∑üá∫ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–∏–∫–ª–æ—Ç–æ–º–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
    /// üá¨üáß Get the cyclotomic order
    fn get_cyclotomic_order(&self) -> usize;
    //  virtual NativePoly DecryptionCRTInterpolate(PlaintextModulus ptm) const
    //= 0;

    /// üá∑üá∫ –î–æ–±–∞–≤–ª—è–µ—Ç –µ–¥–∏–Ω–∏—Ü—É –∫ –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏ —ç–ª–µ–º–µ–Ω—Ç–∞, –≤–º–µ—Å—Ç–æ
    /// üá¨üáß Adds one to every entry of the Element, in place
    fn add_element_one(&mut self);

    /// üá∑üá∫ –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–æ—Ä—Ñ–∏–∑–º–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    /// –ü–∞—Ä–∞–º–µ—Ç—Ä:       &i - —ç–ª–µ–º–µ–Ω—Ç, —Å –∫–æ—Ç–æ—Ä—ã–º –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–æ—Ä—Ñ–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ.
    /// –†–µ–∑—É–ª—å—Ç–∞—Ç:      —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ–º–æ—Ä—Ñ–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è.
    /// 
    /// üá¨üáß Performs an automorphism transform operation and returns the result.
    /// Param &i is the element to perform the automorphism transform with.
    /// Return is the result of the automorphism transform.
    fn automorphism_transform(&self, i: u32) -> Self::Element;

    /// üá∑üá∫ –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–æ—Ä—Ñ–∏–∑–º–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ –±–∏—Ç–æ–≤.
    /// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    ///     &i - —ç–ª–µ–º–µ–Ω—Ç, —Å –∫–æ—Ç–æ—Ä—ã–º –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–æ—Ä—Ñ–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ.
    ///     &vec –≤–µ–∫—Ç–æ—Ä —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–º–∏ –∏–Ω–¥–µ–∫—Å–∞–º–∏
    /// –†–µ–∑—É–ª—å—Ç–∞—Ç:    —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ–º–æ—Ä—Ñ–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è.
    /// 
    /// üá¨üáß Performs an automorphism transform operation using precomputed bit reversal indices.
    ///
    /// Param &i is the element to perform the automorphism transform with.
    /// Param &vec a vector with precomputed indices
    /// Return is the result of the automorphism transform.
    fn automorphism_transform_with_vec(&self, i: u32, vec: &Vec<u32>) -> Self::Element;

    /// üá∑üá∫ –¢—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–æ–ª—å—Ü–∞ —Å –ø–æ–º–æ—â—å—é –æ–ø–µ—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ–º–æ—Ä—Ñ–∏–∑–º–∞
    /// –†–µ–∑—É–ª—å—Ç–∞—Ç:    —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
    /// 
    /// üá¨üáß Transpose the ring element using the automorphism operation
    /// Return is the result of the transposition.
    fn transpose(&self) -> Self::Element;

    /// üá∑üá∫ –ó–∞–ø–∏—à–µ–º —ç–ª–µ–º–µ–Ω—Ç –∫–∞–∫ \f$ \sum\limits{i=0}^{\lfloor {\log q/base}
    /// \rfloor} {(base^i u_i)} \f$ –∏ –≤–µ—Ä–Ω—É—Ç—å –≤–µ–∫—Ç–æ—Ä \f$ \left\{u_0,
    /// u_1,...,u_{\lfloor {\log q/base} \rfloor} \right\} \in R_{{base}^{\lceil
    /// {\log q/base} \rceil}} \f$; –≠—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –ø–æ–¥–ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤ –ø—Ä–æ—Ü–µ–¥—É—Ä–µ
    /// –ø—Ä–æ—Ü–µ–¥—É—Ä–µ —Ä–µ–∞–ª–∏–Ω–µ–∞—Ä–∏–∑–∞—Ü–∏–∏.
    /// 
    /// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    ///     baseBits - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏—Ç–æ–≤ –≤ –±–∞–∑–µ, —Ç.–µ. base = 2^baseBits
    ///     evalModeAnswer - –µ—Å–ª–∏ true, –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–µ –ø–æ–ª–∏–Ω–æ–º—ã –≤
    ///     —Ä–µ–∂–∏–º –æ—Ü–µ–Ω–∫–∏
    /// –†–µ–∑—É–ª—å—Ç–∞—Ç:    —É–∫–∞–∑–∞—Ç–µ–ª—å, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤–µ–∫—Ç–æ—Ä —Ä–∞–∑–ª–æ–∂–µ–Ω–∏—è –±–∞–∑—ã
    /// 
    /// üá¨üáß  Write the element as \f$ \sum\limits{i=0}^{\lfloor {\log q/base}
    /// \rfloor} {(base^i u_i)} \f$ and return the vector of \f$ \left\{u_0,
    /// u_1,...,u_{\lfloor {\log q/base} \rfloor} \right\} \in R_{{base}^{\lceil
    /// {\log q/base} \rceil}} \f$; This is used as a subroutine in the
    /// relinearization procedure.
    ///
    /// @param baseBits is the number of bits in the base, i.e., base = 2^baseBits
    /// @param evalModeAnswer - if true, convert the resultant polynomials to
    /// evaluation mode
    /// @result is the pointer where the base decomposition vector is stored
    fn base_decompose(&self, base_bits: usize, eval_mode_answer: bool) -> Vec<Self::Element>;

    /// üá∑üá∫ –°–∫–∞–ª—è—Ä–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ —Å –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–µ–π –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è - –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–∞–¥ –≤—Å–µ–º–∏ –∑–∞–ø–∏—Å—è–º–∏. 
    /// –ü–∞—Ä–∞–º–µ—Ç—Ä &q - —ç–ª–µ–º–µ–Ω—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –∑–∞–ø–∏—Å—å.
    /// –†–µ–∑—É–ª—å—Ç–∞—Ç: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–µ–ª–µ–Ω–∏—è —Å –ø–æ—Å–ª–µ–¥—É—é—â–∏–º –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º.
    ///
    /// üá¨üáß  Scalar division followed by rounding operation - operation on all entries.
    /// @param &q is the element to divide entry-wise.
    /// @return is the return value of the divide, followed by rounding operation.
    fn divide_and_round(&self, q: &Self::IntType) -> Self::Element;

    /// üá∑üá∫ –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ–±—Ä–∞—Ç–Ω–∞—è –≤–µ–ª–∏—á–∏–Ω–∞.
    /// –†–µ–∑—É–ª—å—Ç–∞—Ç: true, –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–∏–≤–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è –≤–µ–ª–∏—á–∏–Ω–∞.
    /// 
    /// üá¨üáß Determines if inverse exists
    /// @return true if there exists a multiplicative inverse.
    fn inverse_exists(&self) -> bool;

    /// üá∑üá∫ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ—Ä–º—É –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏, –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —ç–ª–µ–º–µ–Ω—Ç–µ –∫–æ–ª—å—Ü–∞
    /// –†–µ–∑—É–ª—å—Ç–∞—Ç: –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —ç–ª–µ–º–µ–Ω—Ç–µ –∫–æ–ª—å—Ü–∞.
    /// 
    /// üá¨üáß Returns the infinity norm, basically the largest value in the ring element.
    /// @return the largest value in the ring element.
    fn norm(&self) -> f64;

    /// üá∑üá∫ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ –≤–µ–∫—Ç–æ—Ä –ø—É—Å—Ç/ m_values==nullptr
    /// –†–µ–∑—É–ª—å—Ç–∞—Ç: true, –µ—Å–ª–∏ –≤–µ–∫—Ç–æ—Ä –ø—É—Å—Ç –∏ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è nullptr, –∏–Ω–∞—á–µ false.
    /// 
    /// üá¨üáß Returns true if the vector is empty/ m_values==nullptr
    /// @return true if the vector is empty and all values nullptr. false otherwise.
    fn is_empty(&self) -> bool;

    /// üá∑üá∫ –°–¥–µ–ª–∞–π—Ç–µ —ç–ª–µ–º–µ–Ω—Ç —Ä–∞–∑—Ä–µ–∂–µ–Ω–Ω—ã–º –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π SHE KeyGen.
    /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–∞–∂–¥—ã–π –∏–Ω–¥–µ–∫—Å, –Ω–µ —Ä–∞–≤–Ω—ã–π –Ω—É–ª—é, –ø–æ –º–æ–¥—É–ª—é wFactor –≤ –Ω–æ–ª—å.
    /// –ü–∞—Ä–∞–º–µ—Ç—Ä &wFactor –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –º–µ–∂–¥—É —Ä–∞–∑–º–µ—Ä–∞–º–∏ –∫–æ–ª—å—Ü–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏ –Ω–æ–≤—ã–º —Ä–∞–∑–º–µ—Ä–æ–º –∫–æ–ª—å—Ü–∞.
    /// 
    /// üá¨üáß Make the element Sparse for SHE KeyGen operations.
    /// Sets every index not equal to zero mod the wFactor to zero.
    /// @param &wFactor ratio between the original element's ring dimension and the new ring dimension.
    fn make_sparse(&mut self, w_factor: u32);

    /// üá∑üá∫ –í—ã—á–∏—Å–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –ø–æ –º–æ–¥—É–ª—é 2
    /// –†–µ–∑—É–ª—å—Ç–∞—Ç: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ mod-2 –Ω–∞–¥ —ç–ª–µ–º–µ–Ω—Ç–æ–º.
    /// 
    /// üá¨üáß Calculate Element mod 2
    /// @return result of performing a mod-2 operation on the element.
    fn mod_by_two(&self) -> Self::Element;

    /// üá∑üá∫ –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—Ç –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–∏–≤–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π –≤–µ–ª–∏—á–∏–Ω—ã —ç–ª–µ–º–µ–Ω—Ç–∞
    /// –†–µ–∑—É–ª—å—Ç–∞—Ç: –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–∏–≤–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è –≤–µ–ª–∏—á–∏–Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
    /// 
    /// üá¨üáß Calculate and return the Multiplicative Inverse of the element
    /// @return the multiplicative inverse of the element, if it exists.
    fn multiplicative_inverse(&self) -> Self::Element;

    /// üá∑üá∫ –°–∫–∞–ª—è—Ä–Ω–æ–µ —É–º–Ω–æ–∂–µ–Ω–∏–µ —Å –ø–æ—Å–ª–µ–¥—É—é—â–∏–º –¥–µ–ª–µ–Ω–∏–µ–º –∏ –æ–ø–µ—Ä–∞—Ü–∏–µ–π –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è - –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–∞–¥ –≤—Å–µ–º–∏ –∑–∞–ø–∏—Å—è–º–∏.
    /// * –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    ///     &p - —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä–∞.
    ///     &q - —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π –¥–µ–ª–∏—Ç–µ–ª—å.
    /// –†–µ–∑—É–ª—å—Ç–∞—Ç: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —É–º–Ω–æ–∂–µ–Ω–∏—è, –¥–µ–ª–µ–Ω–∏—è –∏ –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è.
    /// 
    /// üá¨üáß Scalar multiplication followed by division and rounding operation - operation on all entries.
    /// @param &p is the integer multiplicand.
    /// @param &q is the integer divisor.
    /// @return is the return value of the multiply, divide and followed by
    /// rounding operation.
    fn multiply_and_round(&self, p: &Self::IntType, q: &Self::IntType) -> Self::Element;

    /// üá∑üá∫ –í—ã—á–∏—Å–ª–∏—Ç—å –≤–µ–∫—Ç–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—É—Ç–µ–º –≤–æ–∑–≤–µ–¥–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–µ–ø–µ–Ω–∏
    /// –ü–∞—Ä–∞–º–µ—Ç—Ä baseBits
    /// –†–µ–∑—É–ª—å—Ç–∞—Ç: –≤–µ–∫—Ç–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    /// 
    /// üá¨üáß Calculate a vector of elements by raising the base element to successive powers
    /// @param baseBits
    /// @return
    fn powers_of_base(&self, base_bits: usize) -> Vec<Self::Element>;

    /// üá∑üá∫ Mod - –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é –º–æ–¥—É–ª—è—Ü–∏–∏. –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ [-modulus/2, modulus/2) –Ω–∞ [0, modulus)]
    /// –ü–∞—Ä–∞–º–µ—Ç—Ä modulus - –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –º–æ–¥—É–ª—å.
    /// –†–µ–∑—É–ª—å—Ç–∞—Ç - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–æ–¥—É–ª—è.
    /// 
    /// üá¨üáß Mod - perform a modulus operation.
    /// Does proper mapping of [-modulus/2, modulus/2) to [0, modulus).
    /// @param modulus is the modulus to use.
    /// @return is the return value of the modulus.
    fn modulo(&self, modulus: &Self::IntType) -> Self::Element;

     /// üá∑üá∫ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–æ–¥—É–ª—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π
     /// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: 
     ///    &modulus - –º–æ–¥—É–ª—å, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å.
     ///    &rootOfUnity - —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ—Ä–µ–Ω—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –º–æ–¥—É–ª—è.
     ///    &modulusArb - –º–æ–¥—É–ª—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Ü–∏–∫–ª–æ—Ç–æ–º–∏—á–µ—Å–∫–æ–≥–æ CRT
     ///    &rootOfUnityArb - —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ—Ä–µ–Ω—å –∏–∑ –µ–¥–∏–Ω—Å—Ç–≤–∞ –¥–ª—è –º–æ–¥—É–ª—è
     /// –ü–†–ï–î–ü–û–õ–û–ñ–ï–ù–ò–ï: –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç, —á—Ç–æ –≤—ã–∑—ã–≤–∞—é—â–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π rootOfUnity –¥–ª—è –º–æ–¥—É–ª—è.
     /// 
     /// üá¨üáß Switch modulus and adjust the values 
     /// @param &modulus is the modulus to be set.
     /// @param &rootOfUnity is the corresponding root of unity for the modulus
     /// @param &modulusArb is the modulus used for arbitrary cyclotomic CRT
     /// @param &rootOfUnityArb is the corresponding root of unity for the modulus
     /// ASSUMPTION: This method assumes that the caller provides the correct
     /// rootOfUnity for the modulus.
    fn switch_modulus(
        &mut self,
        modulus: &Self::IntType,
        root_of_unity: &Self::IntType,
        modulus_arb: &Self::IntType,
        root_of_unity_arb: &Self::IntType,
    );

    /// üá∑üá∫ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–∑ Coefficient –≤ CRT –∏–ª–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç; –≤—ã–∑–æ–≤ FFT –∏ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ FFT.
    /// üá¨üáß Convert from Coefficient to CRT or vice versa; calls FFT and inverse FFT.
    fn switch_format(&mut self);

    /// üá∑üá∫ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç/–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞.
    /// –ü–∞—Ä–∞–º–µ—Ç—Ä format —Ñ–æ—Ä–º–∞—Ç/–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏.
    /// üá¨üáß Sets the format/representation of the element.
    /// @param format the format/representation to set.
    fn set_format(&mut self, format: Format);
}
