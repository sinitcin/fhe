//==================================================================================
// BSD 2-Clause License
//
// Copyright (c) 2014-2023, NJIT, Duality Technologies Inc. and other contributors
//            translated from C++ and upgraded by Anton Sinitsyn
//
// All rights reserved.
//
// Author TPOC: contact@openfhe.org
// Anton Sinitsyn: antonsinitsyn@outlook.de
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//==================================================================================

/*
    üá∑üá∫ –ë–∞–∑–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —ç–ª–µ–º–µ–Ω—Ç–∞ —Ä–µ—à–µ—Ç–∫–∏
    üá¨üáß Base class for parameters for a lattice element
*/

use serde::{Deserialize, Serialize};
use std::clone::Clone;
use std::default::Default;
use std::fmt::{Debug, Display, Formatter};

/// üá∑üá∫ –û–±—ä–µ–∫—Ç-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ Element
/// üá¨üáß Wrapper class to hold the parameters for Element types and their inheritors
#[derive(Serialize, Deserialize, Eq, PartialEq, Clone)]
pub struct ElemParams<IntegerType>
where
    IntegerType: Default + Clone,
{
    m_ring_dimension: u32,
    m_cyclotomic_order: u32,
    m_ciphertext_modulus: IntegerType,
    m_root_of_unity: IntegerType,
    m_big_ciphertext_modulus: IntegerType,
    m_big_root_of_unity: IntegerType,
}

impl<IntegerType> ElemParams<IntegerType>
where
    IntegerType: Default + Clone,
{
    /// üá∑üá∫ –ü—Ä–æ—Å—Ç—ã–µ –º–µ—Ç–æ–¥—ã-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç –Ω–∞ –≤—Ö–æ–¥
    /// - –∫–æ—Ä–µ–Ω—å –∏–∑ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞
    /// - –±–æ–ª—å—à–æ–π –∫–æ—Ä–µ–Ω—å –∏–∑ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞
    /// - —Ü–∏–∫–ª–æ—Ç–æ–º–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—è–¥–æ–∫
    /// - –º–æ–¥—É–ª—å —à–∏—Ñ—Ä—Ç–µ–∫—Å—Ç–∞ –∏ –º–æ–¥—É–ª—å –±–æ–ª—å—à–æ–≥–æ —à–∏—Ñ—Ä—Ç–µ–∫—Å—Ç–∞
    /// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ–±–∏—Ç–æ–≤–æ–π —É–ø–∞–∫–æ–≤–∫–∏.
    /// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    /// * order - —Ü–∏–∫–ª–æ—Ç–æ–º–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—è–¥–æ–∫, –æ–±–µ—Ä–Ω—É—Ç—ã–π –Ω–∞–±–æ—Ä–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
    /// * ctModulus - –º–æ–¥—É–ª—å —à–∏—Ñ—Ä—Ç–µ–∫—Å—Ç–∞, –æ–±–µ—Ä–Ω—É—Ç—ã–π –Ω–∞–±–æ—Ä–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
    /// * rUnity - –∫ –∫–æ—Ä–µ–Ω—å –∏–∑ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞.
    /// * bigCtModulus - –±–æ–ª—å—à–æ–π –º–æ–¥—É–ª—å —à–∏—Ñ—Ä—Ç–µ–∫—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –¥–ª—è —É–ø–∞–∫–æ–≤–∫–∏ –±–∏—Ç–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.
    /// * bigRUnity - –±–æ–ª—å—à–æ–π –∫–æ—Ä–µ–Ω—å –∏–∑ –µ–¥–∏–Ω—Å—Ç–≤–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —É–ø–∞–∫–æ–≤–∫–∏ –±–∏—Ç–æ–≤.
    ///
    /// üá¨üáß Simple constructor method that takes as input root of unity, big root of unity,
    /// cyclotomic order and the ciphertext modulus and big ciphertext Modulus.
    /// This is used for bit-packing operations.
    /// Parameters:
    /// * order the cyclotomic order wrapped by the parameter set.
    /// * ctModulus the ciphertext modulus wrapped by the parameter set.
    /// * rUnity the root of unity.
    /// * bigCtModulus the big ciphertext modulus used for bit packing operations.
    /// * bigRUnity the big root of unity used for bit packing operations.

    pub fn new(cyclotomic_order: u32, ciphertext_modulus: IntegerType) -> Self {
        let ring_dimension = Self::get_totient(cyclotomic_order);
        ElemParams {
            m_ring_dimension: ring_dimension,
            m_cyclotomic_order: cyclotomic_order,
            m_ciphertext_modulus: ciphertext_modulus,
            m_root_of_unity: IntegerType::default(),
            m_big_ciphertext_modulus: IntegerType::default(),
            m_big_root_of_unity: IntegerType::default(),
        }
    }

    /// üá∑üá∫ –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: `new_with_runity`
    /// üá¨üáß The previous name is `new_with_runity`
    pub fn new_with_root_of_unity(
        cyclotomic_order: u32,
        ciphertext_modulus: IntegerType,
        root_of_unity: IntegerType,
    ) -> Self {
        let ring_dimension = Self::get_totient(cyclotomic_order);
        ElemParams {
            m_ring_dimension: ring_dimension,
            m_cyclotomic_order: cyclotomic_order,
            m_ciphertext_modulus: ciphertext_modulus,
            m_root_of_unity: root_of_unity,
            m_big_ciphertext_modulus: IntegerType::default(),
            m_big_root_of_unity: IntegerType::default(),
        }
    }

    pub fn new_with_big_modulus(
        cyclotomic_order: u32,
        ciphertext_modulus: IntegerType,
        root_of_unity: IntegerType,
        big_ciphertext_modulus: IntegerType,
        big_root_of_unity: IntegerType,
    ) -> Self {
        let ring_dimension = Self::get_totient(cyclotomic_order);
        ElemParams {
            m_ring_dimension: ring_dimension,
            m_cyclotomic_order: cyclotomic_order,
            m_ciphertext_modulus: ciphertext_modulus,
            m_root_of_unity: root_of_unity,
            m_big_ciphertext_modulus: big_ciphertext_modulus,
            m_big_root_of_unity: big_root_of_unity,
        }
    }

    /// üá∑üá∫ –ü—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–∏–∫–ª–æ—Ç–æ–º–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞.
    /// üá¨üáß Simple getter method for cyclotomic order.
    pub fn get_cyclotomic_order(&self) -> u32 {
        self.m_cyclotomic_order
    }

    /// üá∑üá∫ –ü—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ –∫–æ–ª—å—Ü–∞. –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –∫–æ–ª—å—Ü–∞ - —ç—Ç–æ –æ—Ü–µ–Ω–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –≠–π–ª–µ—Ä–∞ —Ü–∏–∫–ª–æ—Ç–æ–º–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞.
    /// üá¨üáß Simple ring dimension getter method. The ring dimension is the evaluation of the totient function of the cyclotomic order.
    pub fn get_ring_dimension(&self) -> u32 {
        self.m_ring_dimension
    }

    /// üá∑üá∫ –ü—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥—É–ª—è —à–∏—Ñ—Ä—Ç–µ–∫—Å—Ç–∞, –∞ –Ω–µ –±–æ–ª—å—à–æ–≥–æ –º–æ–¥—É–ª—è —à–∏—Ñ—Ä—Ç–µ–∫—Å—Ç–∞.
    /// üá¨üáß Simple getter method for the ciphertext modulus, not the big ciphertext modulus.
    pub fn get_modulus(&self) -> &IntegerType {
        &self.m_ciphertext_modulus
    }

    /// üá∑üá∫ –ü—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª—å—à–æ–≥–æ –º–æ–¥—É–ª—è —à–∏—Ñ—Ä–æ—Ç–µ–∫—Å—Ç–∞. –≠—Ç–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ –Ω–µ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.
    /// üá¨üáß Simpler getter method for the big ciphertext modulus. This is not relevant for all applications.
    pub fn get_big_modulus(&self) -> &IntegerType {
        &self.m_big_ciphertext_modulus
    }

    /// üá∑üá∫ –ü—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä–Ω—è –∏–∑ –µ–¥–∏–Ω–∏—Ü—ã (–Ω–µ –ø—É—Ç–∞—Ç—å —Å –±–æ–ª—å—à–∏–º –∫–æ—Ä–Ω–µ–º –∏–∑ –µ–¥–∏–Ω–∏—Ü—ã).
    /// üá¨üáß Simple getter method for the root of unity, not the big root of unity.
    pub fn get_root_of_unity(&self) -> &IntegerType {
        &self.m_root_of_unity
    }

    /// üá∑üá∫ –ü–æ–ª—É—á–µ–Ω–∏–µ –±–æ–ª—å—à–æ–≥–æ –∫–æ—Ä–Ω—è –∏–∑ –µ–¥–∏–Ω–∏—Ü—ã
    /// üá¨üáß Simple getter method for the big root of unity.
    pub fn get_big_root_of_unity(&self) -> &IntegerType {
        &self.m_big_root_of_unity
    }

    /// üá∑üá∫ –§—É–Ω–∫—Ü–∏—è –≠–π–ª–µ—Ä–∞
    /// üá¨üáß Totient function
    fn get_totient(_cyclotomic_order: u32) -> u32 {
        // TODO: Implement GetTotient function
        unimplemented!()
    }
}

impl<IntegerType> Debug for ElemParams<IntegerType>
where
    IntegerType: Default + Debug + Clone + Display,
{
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "[m={} n={} q={} ru={} bigq={} bigru={}]",
            self.m_cyclotomic_order,
            self.m_ring_dimension,
            self.m_ciphertext_modulus,
            self.m_root_of_unity,
            self.m_big_ciphertext_modulus,
            self.m_big_root_of_unity
        )
    }
}

impl<IntegerType: Default + Clone> Default for ElemParams<IntegerType> {
    fn default() -> Self {
        ElemParams {
            m_ring_dimension: 0,
            m_cyclotomic_order: 0,
            m_ciphertext_modulus: IntegerType::default(),
            m_root_of_unity: IntegerType::default(),
            m_big_ciphertext_modulus: IntegerType::default(),
            m_big_root_of_unity: IntegerType::default(),
        }
    }
}
