//==================================================================================
// BSD 2-Clause License
//
// Copyright (c) 2014-2023, NJIT, Duality Technologies Inc. and other contributors
//            translated from C++ and upgraded by Anton Sinitsyn
//
// All rights reserved.
//
// Author TPOC: contact@openfhe.org
// Anton Sinitsyn: antonsinitsyn@outlook.de
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//==================================================================================

/*
   üá∑üá∫ –≠—Ç–æ—Ç –∫–æ–¥ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≥–∞—É—Å—Å–æ–≤—ã—Ö —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –¥–∏—Å–∫—Ä–µ—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.
   –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–∏—Å–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã—Ö —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –æ–ø–∏—Ä–∞–µ—Ç—Å—è –Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –≤ C++ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä 32-–±–∏—Ç–Ω—ã—Ö
   –±–µ–∑–∑–Ω–∞–∫–æ–≤—ã—Ö —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –≤ <random

   –≠—Ç–æ —Ñ–∞–π–ª –¥–ª—è Generic Sampler, –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–∞–¥–∞—á –¥–∏—Å–∫—Ä–µ—Ç–Ω–æ–π –≥–∞—É—Å—Å–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–∏.
   –≠—Ç–æ—Ç –∫–ª–∞—Å—Å —Ä–µ–∞–ª–∏–∑—É–µ—Ç –æ–±—â–∏–π —Å—ç–º–ø–ª–µ—Ä –æ—Ç UCSD, –æ –∫–æ—Ç–æ—Ä–æ–º –≥–æ–≤–æ—Ä–∏–ª–æ—Å—å –≤ https://eprint.iacr.org/2017/259.pdf,
   –∏ –æ–Ω –≤ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–π —Å—Ç–µ–ø–µ–Ω–∏ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–æ–¥–µ –ú–∞–π–∫–ª–∞ –£–æ–ª—Ç–µ—Ä–∞.
   –¢–∞–∫–∂–µ –µ—Å—Ç—å –¥–≤–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö ¬´–±–∞–∑–æ–≤—ã—Ö —Å—ç–º–ø–ª–µ—Ä–∞¬ª, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –æ–±—â–µ–≥–æ —Å–µ–º–ø–ª–µ—Ä–∞ –∏–ª–∏ –º–æ–≥—É—Ç –±—ã—Ç—å
   –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∑–∞–¥–∞—á–∏.

   –ü–µ—Ä–≤—ã–π –±–∞–∑–æ–≤—ã–π —Å—ç–º–ø–ª–µ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ç–æ–¥ –∏–Ω–≤–µ—Ä—Å–∏–∏ –ü–µ–π–∫–µ—Ä—Ç–∞, —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π –≤ —Ä–∞–∑–¥–µ–ª–µ 4.1 –Ω–∞ —Å–∞–π—Ç–µ
   https://eprint.iacr.org/2010/088.pdf –∏ –æ–±–æ–±—â–µ–Ω–Ω—ã–π –≤ —Ä–∞–∑–¥–µ–ª–µ 3.2.2 –Ω–∞ —Å–∞–π—Ç–µ
   https://link.springer.com/content/pdf/10.1007%2Fs00200-014-0218-3.pdf.
   –ú–µ—Ç–æ–¥ –ü–µ–π–∫–µ—Ä—Ç–∞ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã CDF –≤–æ–∫—Ä—É–≥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞, –∏ —ç—Ç–∞ —Ç–∞–±–ª–∏—Ü–∞
   –¥–æ–ª–∂–Ω–∞ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–±–æ—Ä–∫–∏. –°–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, –ú–µ—Ç–æ–¥ –ü–µ–π–∫–µ—Ä—Ç–∞ –ª—É—á—à–µ –≤—Å–µ–≥–æ —Ä–∞–±–æ—Ç–∞–µ—Ç,
   –µ—Å–ª–∏ –∂–µ–ª–∞–µ–º–æ–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –Ω–µ–≤–µ–ª–∏–∫–æ, –∞ —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ,
   –ø–æ—Å–∫–æ–ª—å–∫—É –∫–∞–∂–¥—ã–π –Ω–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä —Ç—Ä–µ–±—É–µ—Ç –Ω–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π.

   –í—Ç–æ—Ä–æ–π –±–∞–∑–æ–≤—ã–π —Å—ç–º–ø–ª–µ—Ä - —Å—ç–º–ø–ª–µ—Ä –ö–Ω—É—Ç–∞-–Ø–æ, —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π –≤ —Ä–∞–∑–¥–µ–ª–µ 5
   https://link.springer.com/content/pdf/10.1007%2Fs00200-014-0218-3.pdf.
   –ü–æ–¥–æ–±–Ω–æ –º–µ—Ç–æ–¥—É –ü–µ–π–∫–µ—Ä—Ç–∞, –ö–Ω—É—Ç-–Ø–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã—á–∏—Å–ª—è–µ—Ç PDF —á–∏—Å–µ–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∏ —Ü–µ–Ω—Ç—Ä–∞,
   –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–±–æ—Ä–∫–∏.
   –ü–æ—ç—Ç–æ–º—É, –∫–∞–∫ –∏ –º–µ—Ç–æ–¥ –ü–µ–π–∫–µ—Ä—Ç–∞, –º–µ—Ç–æ–¥ –ö–Ω—É—Ç–∞-–Ø–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –ª—É—á—à–µ –≤—Å–µ–≥–æ, –µ—Å–ª–∏ –∂–µ–ª–∞–µ–º–æ–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –Ω–µ–≤–µ–ª–∏–∫–æ,
   –∞ —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ, –ø–æ—Å–∫–æ–ª—å–∫—É –∫–∞–∂–¥—ã–π –Ω–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä –ø–æ—Ç—Ä–µ–±—É–µ—Ç –Ω–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö
   –≤—ã—á–∏—Å–ª–µ–Ω–∏–π, –∫–∞–∫ –∏ –≤ –º–µ—Ç–æ–¥–µ –∏–Ω–≤–µ—Ä—Å–∏–∏ –ü–µ–π–∫–µ—Ä—Ç–∞.)

   –° –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã, ¬´–æ–±—â–∏–π —Å—ç–º–ø–ª–µ—Ä¬ª —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è.
   –û–Ω –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –º–∞—Å—Å–∏–≤ —Ä–∞–Ω–µ–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –±–∞–∑–æ–≤—ã—Ö —Å—ç–º–ø–ª–æ–≤, —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–æ–∫—Ä—É–≥ –æ—Ç 0 –¥–æ (2^b-1) / 2^b,
   –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º —Å–≤–µ—Ä—Ç–∫–∏. –¢–∞–±–ª–∏—Ü—ã –±–∞–∑–æ–≤—ã—Ö –≤—ã–±–æ—Ä–æ–∫, –æ–¥–Ω–∞–∫–æ, –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω—ã –∑–∞—Ä–∞–Ω–µ–µ, –Ω–æ –∏—Ö –Ω–µ –Ω—É–∂–Ω–æ
   –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—ã–±–æ—Ä–∫–∏. –ú–µ—Ç–æ–¥ USABLE FOR ANY STANDARD DEVIATION AND MEAN, –∫–∞–∫ –∏ –º–µ—Ç–æ–¥ –ö–∞—Ä–Ω–∏,
   –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –≤ discrete_gaussian_generator.rs, —Ç—Ä–µ–±—É–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏ –Ω–µ –ø–æ–¥–≤–µ—Ä–∂–µ–Ω
   –∞—Ç–∞–∫–∞–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏, –≤ –æ—Ç–ª–∏—á–∏–µ –æ—Ç –ö–∞—Ä–Ω–∏. –ú–µ—Ç–æ–¥ –ö–∞—Ä–Ω–∏, –æ–¥–Ω–∞–∫–æ, –±—ã—Å—Ç—Ä–µ–µ, —á–µ–º –æ–±—â–∏–π —Å—ç–º–ø–ª–µ—Ä.

   –ü–û–î–ë–û–† –ü–ê–†–ê–ú–ï–¢–†–û–í –î–õ–Ø –û–ë–©–ï–ì–û –°–≠–ú–ü–õ–ï–†–ê

   –í—ã–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑–º–µ–Ω—è–µ—Ç –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã/–∑–∞—Ç—Ä–∞—Ç—ã –ø–∞–º—è—Ç–∏/—Ç–æ—á–Ω–æ—Å—Ç—å –æ–±—â–µ–≥–æ —Å—ç–º–ø–ª–µ—Ä–∞. –¢—Ä–æ–π–Ω–æ–π –∫–æ–º–ø—Ä–æ–º–∏—Å—Å –º–µ–∂–¥—É
   —ç—Ç–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —É—Ä–∞–≤–Ω–µ–Ω–∏–µ–º k = (PRECISION - FLIPS) / LOG_BASE. k –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Ç–æ—á–Ω–æ—Å—Ç–∏
   –æ–±—â–µ–≥–æ —Å–µ–º–ø–ª–µ—Ä–∞. –ß–µ–º –≤—ã—à–µ k, —Ç–µ–º –≤—ã—à–µ —Ç–æ—á–Ω–æ—Å—Ç—å –æ–±—â–µ–≥–æ —Å—ç–º–ø–ª–µ—Ä–∞, –Ω–æ –≤—ã—à–µ –∏ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã.
   PRECISION  –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –±–∏—Ç–æ–≤ –≤ —Ü–µ–Ω—Ç—Ä–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è. –ü–æ—Å–∫–æ–ª—å–∫—É –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º
   'double' –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è, –æ–Ω–æ –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é —Ä–∞–≤–Ω–æ 53.
   FLIPS –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–Ω–∏–π –ë–µ—Ä–Ω—É–ª–ª–∏ (–ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ —Å –º–æ–Ω–µ—Ç–∫–æ–π), –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –¥–ª—è –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏–∏ –±–∏—Ç–æ–≤,
   –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –≤ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –±–∞–∑–æ–≤–æ–≥–æ —Å—ç–º–ø–ª–µ—Ä–∞. –ß–µ–º –±–æ–ª—å—à–µ —á–∏—Å–ª–æ –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–Ω–∏–π, —Ç–µ–º –±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏—Ç–æ–≤
   –∞–ø–ø—Ä–æ–∫—Å–∏–º–∏—Ä—É–µ—Ç—Å—è, –∞ –Ω–µ –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è, —á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –º–µ–Ω—å—à–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã. –û–±—â–∏–π —Å—ç–º–ø–ª–µ—Ä —Ç—Ä–µ–±—É–µ—Ç –Ω–∞–±–æ—Ä–∞ –±–∞–∑–æ–≤—ã—Ö
   —Å—ç–º–ø–ª–µ—Ä–æ–≤, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 0/2^b –¥–æ (2^b-1)/2^b;
   LOG_BASE –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç b –≤ —ç—Ç–æ–º —É—Ä–∞–≤–Ω–µ–Ω–∏–∏. –ü—Ä–∏ –±–æ–ª—å—à–µ–º –∑–Ω–∞—á–µ–Ω–∏–∏ LOG_BASE —Ç—Ä–µ–±—É–µ—Ç—Å—è –±–æ–ª—å—à–µ –±–∞–∑–æ–≤—ã—Ö —Å–µ–º–ø–ª–æ–≤,
   —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏, –Ω–æ –≤ —Ç–æ –∂–µ –≤—Ä–µ–º—è —É–º–µ–Ω—å—à–∞–µ—Ç –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.

   –ë–∞–∑–æ–≤—ã–µ —Å—ç–º–ø–ª—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –≤ –æ–±—â–µ–º —Å—ç–º–ø–ª–µ—Ä–µ, —Ç—Ä–µ–±—É—é—Ç –≤–∞—Ä—å–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—Ç—Ä–æ–≤ –º–µ–∂–¥—É 0/2^b –∏ (2^b-1)/(2^b)
   —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ–º. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ, —Ç—Ä–µ–±—É–µ–º–æ–µ –¥–ª—è –±–∞–∑–æ–≤—ã—Ö –≤—ã–±–æ—Ä–æ–∫, –¥–æ–ª–∂–Ω–æ
   —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—Ç—å SIGMA>=4*SQRT(2)*N, –≥–¥–µ sigma - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–∏, –∞ N - –ø–∞—Ä–∞–º–µ—Ç—Ä —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è


   üá¨üáß This code provides generation of gaussian distributions of discrete values. Discrete uniform generator
   relies on the built-in C++ generator for 32-bit unsigned integers defined in <random>

   This is the header file for the Generic Sampler used for various Discrete
   Gaussian Sampling applications. This class implements the generic sampler by
   UCSD discussed in the https://eprint.iacr.org/2017/259.pdf and it is heavily
   based on Michael Walter's original code. Along the sides of the
   implementation there are also two different "base samplers", which are used
   for the generic sampler or can be used on their own depending on the
   requirements of needed application.

   The first base sampler uses Peikert's inversion method, discussed in
   section 4.1 of https://eprint.iacr.org/2010/088.pdf and summarized in
   section 3.2.2 of
   https://link.springer.com/content/pdf/10.1007%2Fs00200-014-0218-3.pdf.
   Peikert's method requires precomputation of CDF tables around a specific
   center and the table must be kept during the sampling process. Hence,
   Peikert's method works best if the DESIRED STANDARD DEVIATION IS SMALL and
   THE MEAN OF THE DISTRIBUTION IS FIXED, as each new center will require a new
   set of precomputations.

   Second base sampler is  the Knuth-Yao Sampler discussed in section 5 of
   https://link.springer.com/content/pdf/10.1007%2Fs00200-014-0218-3.pdf .
   Similar to Peikert's, Knuth-Yao precomputes the PDF's of the numbers based on
   standard deviation and the center, which is used during the sampling process.
   Therefore like Peikert's method,  Knuth-Yao works best method works best if
   the DESIRED STANDARD DEVIATION IS SMALL and THE MEAN OF THE DISTRIBUTION IS
   FIXED, as each new center will require a new set of precomputations, just
   like Peikert's inversion method.

   The "generic sampler" on the other hand, works independent from standard
   deviation of the distribution. It combines an array of previously discussed
   base samplers centered around 0 to (2^b-1) / 2^b through convolution. The
   tables of base samplers however, must be precomputed beforehand; but they do
   not need to be recalculated at any time of the sampling process. It is USABLE
   FOR ANY STANDARD DEVIATION AND MEAN, just like Karney's method defined in
   discretegaussiangenerator.h, needs only one single precomputation and is not
   prone to timing attacks unlike Karney. Karney's method, however, is faster
   than the generic sampler.

   PARAMETER SELECTION FOR GENERIC SAMPLER

   The selection of parameters change the run time/memory usage/precision of the
   generic sampler. The triple trade off between these parameters are defined in
   the equation k = (PRECISION - FLIPS) / LOG_BASE. k denotes the level of
   precision of the generic sampler. Higher the k is, higher the precision of
   the generic sampler but higher the run time. PRECISION denotes the number of
   decimal bits in the center of the distribution. Since we are using 'double'
   for mean, it is fixed to 53 by definition. FLIPS denote the number of
   Bernoulli flips used to approximate the bits used in combination of base
   sampler. Higher the number of flips, larger the number of bits approximated
   rather than calculated which means smaller run times. Generic sampler
   requires a set of base samplers centered around 0/2^b to (2^b-1)/2^b;
   LOG_BASE denotes b in this equation. Higher the LOG_BASE is, more base
   samplers required which requires additional memory; but at the same time
   smaller run times.

   The base samplers used in generic sampler requires varying centers between
   0/2^b and (2^b-1)/(2^b) with the same standard deviation. The standard
   deviation required for base samplers must satisfy SIGMA>=4*SQRT(2)*N, where
   sigma is the standard deviation of the base sampler and N is the smoothing
   parameter


   discretegaussiangeneratorgeneric.h
   discretegaussiangeneratorgeneric.cpp
*/

use std::{collections::VecDeque, fmt::Debug};

const PRECISION: u32 = 53;
const BERNOULLI_FLIPS: u32 = 23;
const MAX_TREE_DEPTH: i32 = 64;
const MAX_LEVELS: i32 = 4;

// const double DG_ERROR = 8.27181e-25;
// const int32_t N_MAX = 16384;
// const double SIGMA = std::sqrt(std::log(2 * N_MAX / DG_ERROR) / M_PI);
// const int32_t PRECISION = 128;
// const double TAIL_CUT = std::sqrt(log(2)*2*(double)(PRECISION));
// const int32_t DDG_DEPTH = 13;

#[derive(PartialEq, Debug, Clone, Copy)]
pub enum BaseSamplerType {
    KnuthYao,
    PeikertInversion,
}

/// üá∑üá∫ –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –±–∏—Ç–æ–≤. –°–æ–∑–¥–∞–Ω –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—É–ª–æ–≤ —Å–ª—É—á–∞–π–Ω—ã—Ö –±–∏—Ç–æ–≤ –≤ —Å—ç–º–ø–ª–µ—Ä–∞—Ö
/// üá¨üáß Class implementation to generate random bit. This is created for centralizing the random bit pools by the samplers.
#[derive(Debug, Clone)]
pub struct BitGenerator {
    sequence: u32,
    counter: u32,
}

impl BitGenerator {
    pub fn new() -> BitGenerator {
        BitGenerator {
            sequence: 0,
            counter: 0,
        }
    }

    /// üá∑üá∫ –ú–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –±–∏—Ç–∞.
    /// üá¨üáß Method for generating a random bit. Return A random bit
    pub fn generate(&mut self) -> i16 {
        if self.counter == 0 {
            self.sequence = rand::random::<u32>();
            self.counter = 32;
        }
        let bit = (self.sequence >> (self.counter - 1)) & 0x1;
        self.counter -= 1;
        bit as i16
    }

    pub fn generate_bit(&mut self) -> bool {
        self.generate() != 0
    }
}

/// üá∑üá∫ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –¥–ª—è –±–∞–∑–æ–≤—ã—Ö —Å—ç–º–ø–ª–µ—Ä–æ–≤ —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è–º–∏, –∫–æ—Ç–æ—Ä–æ–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–±—â–µ–≥–æ —Å—ç–º–ø–ª–µ—Ä–∞ UCSD
/// üá¨üáß Class definition for base samplers with precomputation that is used for UCSD generic sampler
#[derive(Debug, Clone)]
pub struct BaseSamplerObject {
    /// üá∑üá∫ –°—Ä–µ–¥–Ω—è—è –≤–µ–ª–∏—á–∏–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    /// üá¨üáß Mean of the distribution used
    b_mean: f64,

    /// üá∑üá∫ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è.
    /// üá¨üáß The standard deviation of the distribution.
    b_std: f64,

    /// üá∑üá∫ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –±–∏—Ç–æ–≤ –ø—É—Ç–µ–º –≤—ã–±–æ—Ä–∫–∏
    /// üá¨üáß Generator used for creating random bits through sampling
    bg: BitGenerator, // bg: Box<dyn BitGenerator>,

    /// üá∑üá∫ –¢–∏–ø –±–∞–∑–æ–≤–æ–≥–æ —Å—ç–º–ø–ª–µ—Ä–∞ (Knuth Yao –∏–ª–∏ Peikert's Inversion)
    /// üá¨üáß Type of the base sampler (Knuth Yao or Peikert's Inversion)
    b_type: BaseSamplerType,

    b_a: f64,
    ddg_tree: Vec<VecDeque<i32>>,

    /// üá∑üá∫ –ú–∞—Å—Å–∏–≤, —Ö—Ä–∞–Ω—è—â–∏–π –≤–µ—Å–∞ –•—ç–º–º–∏–Ω–≥–∞ –º–∞—Ç—Ä–∏—Ü—ã –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–π –≤ –≤—ã–±–æ—Ä–∫–µ –ö–Ω—É—Ç–∞-–Ø–æ
    /// üá¨üáß Array that stores the Hamming Weights of the probability matrix used in Knuth-Yao sampling
    hamming_weights: Vec<u32>,

    /// üá∑üá∫ –†–∞–∑–º–µ—Ä –º–∞—Ç—Ä–∏—Ü—ã –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–π –≤ Knuth-Yao
    /// üá¨üáß Size of probability matrix used in Knuth-Yao
    b_matrix_size: i32,

    /// üá∑üá∫ –ò–Ω–¥–µ–∫—Å –ø–µ—Ä–≤–æ–≥–æ –±–∏—Ç–∞ —Å –Ω–µ–Ω—É–ª–µ–≤—ã–º –≤–µ—Å–æ–º –•—ç–º–º–∏–Ω–≥–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
    /// üá¨üáß Index of first bit with non zero Hamming weight in the probability table
    first_non_zero: i32,

    end_index: i32,

    fin: i32,
    m_vals: Vec<f64>,
}

/// üá∑üá∫ –¢—Ä–µ–π—Ç –¥–ª—è –±–∞–∑–æ–≤—ã—Ö —Å—ç–º–ø–ª–µ—Ä–æ–≤
/// üá¨üáß Trait for base samplers
trait BaseSampler {
    fn generate_integer(&mut self) -> i64;
}

impl BaseSamplerObject {
    /// üá∑üá∫ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
    ///
    /// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    /// - mean: –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    /// - std: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    /// - generator: –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –±–∏—Ç–æ–≤, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ —Å—ç–º–ø–ª–µ—Ä –±—É–¥–µ—Ç –±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ –±–∏—Ç—ã
    /// - bType: –¢–∏–ø –±–∞–∑–æ–≤–æ–≥–æ —Å—ç–º–ø–ª–µ—Ä–∞
    ///
    ///
    /// üá¨üáß Constructor
    ///
    /// Parameters:
    /// - mean: Mean of the distribution
    /// - std: Standard deviation of the distribution
    /// - generator: Pointer to the bit generator that the sampler will use the random bits from
    /// - bType: Type of the base sampler
    fn new(mean: f64, std: f64, generator: BitGenerator, b_type: BaseSamplerType) -> Self {
        let acc: f64 = 1e-17;
        let fin = (std * (-2.0 * acc.ln()).sqrt()).ceil() as i32;
        let b_mean = if mean >= 0.0 {
            mean.floor()
        } else {
            mean.ceil()
        };

        let mean = mean - b_mean;
        let mut sampler = BaseSamplerObject {
            b_mean,
            b_std: std,
            bg: generator,
            b_type,
            fin,
            m_vals: Vec::new(),
            b_a: 0.0,
            b_matrix_size: 0,
            hamming_weights: vec![0; 64],
            ddg_tree: Vec::new(),
            first_non_zero: -1,
            end_index: 0,
        };

        if b_type == BaseSamplerType::PeikertInversion {
            sampler.initialize(mean);
        } else {
            sampler.generate_prob_matrix(std, mean);
        }

        sampler
    }

    /// üá∑üá∫ –ú–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –±–∏—Ç–∞ —Å –ø–æ–º–æ—â—å—é –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –±–∏—Ç–æ–≤ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –±–∏—Ç–∞
    /// üá¨üáß Method for generating a random bit from the bit generator within return a random bit
    fn random_bit(&mut self) -> bool {
        self.bg.generate() != 0
    }

    /// üá∑üá∫ –ü–æ–¥–ø—Ä–æ—Ü–µ–¥—É—Ä–∞, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –∏–Ω–≤–µ—Ä—Å–∏–æ–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–æ–π –ü–µ–π–∫–µ—Ä—Ç–∞
    ///
    /// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    /// - S: –í–µ–∫—Ç–æ—Ä, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∑–Ω–∞—á–µ–Ω–∏—è CDF
    /// - search: –ó–Ω–∞—á–µ–Ω–∏–µ –∏—Å–∫–æ–º–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
    ///
    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: –ò–Ω–¥–µ–∫—Å, –∫–æ—Ç–æ—Ä—ã–π —è–≤–ª—è–µ—Ç—Å—è –Ω–∞–∏–º–µ–Ω—å—à–∏–º –±–æ–ª—å—à–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º, —á–µ–º –∏—Å–∫–æ–º–æ–µ
    ///
    /// üá¨üáß Sub-procedure called by Peikert's inversion sampling
    ///
    /// Parameters:
    /// - S: Vector containing the CDF values
    /// - search: Searched probability value
    ///
    /// Returns: Index that is the smallest bigger value than search

    // fn find_in_vector(&self, s: &[f64], search: f64) -> i32 {
    //     match s.binary_search_by(|x| x.partial_cmp(&search).unwrap()) {
    //         Ok(index) => index as i32,
    //         Err(_) => panic!("DGG Inversion Sampling. FindInVector value not found: {}", search),
    //     }
    // }
    fn find_in_vector(&self, s: &[f64], search: f64) -> usize {
        s.iter().position(|&x| x >= search).unwrap_or(s.len())
    }

    /// üá∑üá∫ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ä–µ–≤–æ DDG, –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ –≤ Knuth-Yao
    ///
    /// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    /// - probMatrix: –ú–∞—Ç—Ä–∏—Ü–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è DDG-–¥–µ—Ä–µ–≤–∞
    ///
    /// üá¨üáß Generates DDG tree used through the sampling in Knuth-Yao
    ///
    /// Parameters:
    /// - probMatrix: The probability matrix used for filling the DDG tree
    fn generate_ddg_tree(&mut self, prob_matrix: &[u64]) {
        self.first_non_zero = -1;
        for i in 0..64 {
            if self.hamming_weights[i] != 0 {
                self.first_non_zero = i as i32;
                break;
            }
        }

        self.end_index = self.first_non_zero;
        let mut inode_count = 1;
        for _ in 0..self.first_non_zero {
            inode_count *= 2;
        }

        // let mut end = false;
        let mut max_node_count = inode_count;
        for i in self.first_non_zero..MAX_TREE_DEPTH {
            inode_count *= 2;
            self.end_index += 1;
            if inode_count as u32 >= max_node_count {
                max_node_count = inode_count;
            }
            inode_count -= self.hamming_weights[i as usize];
            if inode_count <= 0 {
                // end = true;
                if inode_count < 0 {
                    self.end_index -= 1;
                }
                break;
            }
        }

        let size = max_node_count as usize;
        self.ddg_tree =
            vec![VecDeque::with_capacity((self.end_index - self.first_non_zero) as usize); size];

        for i in 0..size {
            self.ddg_tree[i] =
                VecDeque::from(vec![-2; (self.end_index - self.first_non_zero) as usize]);
        }

        inode_count = 1;
        for _ in 0..self.first_non_zero {
            inode_count *= 2;
        }

        for i in self.first_non_zero..self.end_index {
            inode_count *= 2;
            inode_count -= self.hamming_weights[i as usize];
            for j in 0..(inode_count as u32) {
                self.ddg_tree[j as usize][(i - self.first_non_zero) as usize] = -1;
            }
            let mut enode_count = 0;
            for j in 0..prob_matrix.len() {
                if (prob_matrix[j] >> (63 - i as u32)) & 1 != 0 {
                    self.ddg_tree[inode_count as usize + enode_count]
                        [(i - self.first_non_zero) as usize] = j as i32;
                    enode_count += 1;
                }
            }
        }
    }

    /// üá∑üá∫ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –¥–ª—è –º–µ—Ç–æ–¥–∞ –∏–Ω–≤–µ—Ä—Å–∏–∏ –ü–µ–π–∫–µ—Ä—Ç–∞.
    ///
    /// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    /// - mean: –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—ç–º–ø–ª–µ—Ä.
    ///
    /// üá¨üáß Initializes the generator used for Peikert's Inversion method.
    ///
    /// Parameters:
    /// - mean: Mean of the distribution that the sampler will be using

    fn initialize(&mut self, mean: f64) {
        self.m_vals.clear();
        let variance = self.b_std.powi(2);
        let mut cusum = 0.0;

        for x in (-self.fin)..=self.fin {
            cusum += (-(x as f64 - mean).powi(2) / (variance * 2.0)).exp();
        }

        self.b_a = 1.0 / cusum;

        for i in (-self.fin)..=self.fin {
            let temp = self.b_a * (-(f64::from(i as f64 - mean).powi(2) / (2.0 * variance))).exp();
            self.m_vals.push(temp);
        }

        for i in 1..self.m_vals.len() {
            self.m_vals[i] += self.m_vals[i - 1];
        }
    }

    /// üá∑üá∫ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–∞—Ç—Ä–∏—Ü—É –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –º–µ—Ç–æ–¥–µ –ö–Ω—É—Ç–∞-–Ø–æ
    ///
    /// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    /// - stddev: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–∏—Å–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥–∞—É—Å—Å–æ–≤—Å–∫–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    /// - mean: –¶–µ–Ω—Ç—Ä —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    /// - tableCount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã
    ///
    /// üá¨üáß Generates the probability matrix of given distribution, which is used in Knuth-Yao method
    ///
    /// Parameters:
    /// - stddev: Standard deviation of Discrete Gaussian Distribution
    /// - mean: Center of the distribution
    /// - tableCount: Number of probability tables to be generated
    fn generate_prob_matrix(&mut self, stddev: f64, mean: f64) {
        let mut prob_matrix = vec![0u64; 2 * self.fin as usize + 1];
        let mut probs = vec![0.0; 2 * self.fin as usize + 1];
        let mut s = 0.0;
        self.b_std = stddev;
        let mut error = 1.0;

        for i in -self.fin..=self.fin {
            let prob = (-((i as f64 - mean).powi(2) / (2.0 * stddev.powi(2)))).exp();
            s += prob;
            probs[(i + self.fin) as usize] = prob;
        }

        match prob_matrix.last_mut() {
            Some(last) => *last = (error * 2.0f64.powi(64)) as u64,
            None => panic!("Error in generate_prob_matrix"),
        }

        for i in 0..prob_matrix.len() {
            error -= probs[i] / s;
            prob_matrix[i] = (probs[i] / s * 2.0f64.powi(64)) as u64;
            for j in 0..64 {
                self.hamming_weights[j] += ((prob_matrix[i] >> (63 - j)) & 1) as u32;
            }
        }

        self.generate_ddg_tree(&prob_matrix);
    }

    /// üá∑üá∫ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ö–Ω—É—Ç–∞-–Ø–æ.
    /// –ê–ª–≥–æ—Ä–∏—Ç–º –ö–Ω—É—Ç–∞-–Ø–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∏—Å–∫—Ä–µ—Ç–Ω–æ–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–µ –≤ –≤–∏–¥–µ DDG –¥–µ—Ä–µ–≤–∞,
    /// –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª. –≠—Ç–æ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ —Å–ª–æ–∂–Ω—ã–º–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è–º–∏
    /// –±–ª–∞–≥–æ–¥–∞—Ä—è —Å–≤–æ–µ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Ç–æ—á–Ω–æ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞—Ç—å –¥–∏—Å–∫—Ä–µ—Ç–Ω—ã–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –±–∏–Ω–∞—Ä–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ.
    /// –í–∞–∂–Ω—ã–º –∞—Å–ø–µ–∫—Ç–æ–º —è–≤–ª—è–µ—Ç—Å—è –µ–≥–æ –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—è
    /// –∫–∞–∂–¥—ã–π –±–∏—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ –¥–≤–æ–∏—á–Ω–æ–≥–æ —á–∏—Å–ª–∞ –¥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —É—Å–ª–æ–≤–∏—è —É—Å–ø–µ—Ö–∞ –∏–ª–∏ –æ—à–∏–±–∫–∏.
    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –≤–µ–ª–∏—á–∏–Ω—É –≤ —Ä–∞–º–∫–∞—Ö –¥–∏—Å–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥–∞—É—Å—Å–æ–≤–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    /// üá¨üáß Returns a generated integer. Uses Naive Knuth-Yao method. Return a random value within the Discrete Gaussian Distribution

    fn generate_integer_knuth_yao(&mut self) -> i64 {
        // –ù–∞—á–∞–ª—å–Ω–æ–µ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        let mut ans = -1;
        // –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π –Ω–∞ —É–¥–∞—á–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —á–∏—Å–ª–∞
        let mut hit = false;

        while !hit {
            // –ò–Ω–¥–µ–∫—Å —É–∑–ª–∞ –≤ DDG –¥–µ—Ä–µ–≤–µ
            let mut node_index = 0;
            // –§–ª–∞–≥ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            let mut error = false;

            // –¶–∏–∫–ª –ø–æ –≥–ª—É–±–∏–Ω–µ –¥–µ—Ä–µ–≤–∞
            for i in 0..MAX_TREE_DEPTH {
                // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –±–∏—Ç–∞
                let bit = self.bg.generate_bit();
                // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –ø—É—Ç–∏ –ø–æ –¥–µ—Ä–µ–≤—É: –µ—Å–ª–∏ bit == true, –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –ø—Ä–∞–≤—ã–π –ø–æ—Ç–æ–º–æ–∫, –∏–Ω–∞—á–µ - –ª–µ–≤—ã–π
                node_index *= 2;
                if bit {
                    node_index += 1;
                }

                // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ç–µ–∫—É—â–∞—è –≥–ª—É–±–∏–Ω–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ –∑–Ω–∞—á–∏–º–æ–π —á–∞—Å—Ç–∏ –¥–µ—Ä–µ–≤–∞
                if self.first_non_zero <= i as i32 {
                    if i as i32 <= self.end_index {
                        // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ DDG –¥–µ—Ä–µ–≤–∞. –≠—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—É–º–º–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
                        // –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –ø—É—Ç–∏ –∏ –≥–ª—É–±–∏–Ω—ã
                        ans = self.ddg_tree[node_index as usize]
                            [(i - self.first_non_zero as i32) as usize];
                    }
                    if ans >= 0 {
                        // –ï—Å–ª–∏ ans –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –≥—Ä–∞–Ω–∏—Ü—ã (self.b_matrix_size - 1),
                        // —Ç–æ –Ω–∞–π–¥–µ–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ —Å–ª—É—á–∞–π–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                        if ans != (self.b_matrix_size - 1) as i32 {
                            // –£—Å–ø–µ—Ö, –Ω—É–∂–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ
                            hit = true;
                        } else {
                            // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                            error = true;
                        }
                    } else {
                        // –û—Å–æ–±—ã–π —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏
                        if ans == -2 {
                            error = true;
                        }
                    }
                }
                if hit || error {
                    // –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ü–∏–∫–ª–∞ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —É—Å–ø–µ—Ö–∞ –∏–ª–∏ –æ—à–∏–±–∫–∏
                    break;
                }
            }
        }

        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        (ans - self.fin + self.b_mean as i32) as i64
    }

    /// üá∑üá∫ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ç–æ–¥ –∏–Ω–≤–µ—Ä—Å–∏–∏ –ü–µ–π–∫–µ—Ä—Ç–∞.
    /// üá¨üáß Returns a generated integer. Uses Peikert's inversion method.
    fn generate_integer_peikert(&self) -> i64 {
        use rand::prelude::*;

        let mut rng = thread_rng();
        let seed: f64 = rng.gen();
        let val = self.find_in_vector(&self.m_vals, seed);
        (val as i32 - self.fin + self.b_mean as i32) as i64
    }
}

impl BaseSampler for BaseSamplerObject {
    /// üá∑üá∫ –ú–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞ –∏–∑ –±–∞–∑–æ–≤–æ–≥–æ —Å—ç–º–ø–ª–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞ –∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    /// üá¨üáß Method for generating integer from the base sampler a random integer from the distribution
    fn generate_integer(&mut self) -> i64 {
        match self.b_type {
            BaseSamplerType::KnuthYao => self.generate_integer_knuth_yao(),
            BaseSamplerType::PeikertInversion => self.generate_integer_peikert(),
        }
    }
}

/// üá∑üá∫ –ö–ª–∞—Å—Å –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –æ–±—Ä–∞–∑—Ü–æ–≤ –∏–∑ –¥–≤—É—Ö –±–∞–∑–æ–≤—ã—Ö –ø—Ä–æ–±–æ–æ—Ç–±–æ—Ä–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–±—â–µ–≥–æ –æ—Ç–±–æ—Ä–∞ –æ–±—Ä–∞–∑—Ü–æ–≤ UCSD
/// üá¨üáß Class for combining samples from two base samplers, which is used for UCSD generic sampling
#[derive(Clone)]
struct SamplerCombiner {
    sampler1: Box<dyn BaseSampler>,
    sampler2: Box<dyn BaseSampler>,
    x1: i64,
    x2: i64,
}

impl SamplerCombiner {
    /// üá∑üá∫ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
    ///
    /// # –ê—Ä–≥—É–º–µ–Ω—Ç—ã
    ///
    /// * `s1` - –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –ø–µ—Ä–≤—ã–π –æ–±—ä–µ–¥–∏–Ω—è–µ–º—ã–π —Å–µ–º–ø–ª–µ—Ä
    /// * `s2` - –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –≤—Ç–æ—Ä–æ–π –æ–±—ä–µ–¥–∏–Ω—è–µ–º—ã–π —Å–µ–º–ø–ª–µ—Ä
    /// * `z1` - –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å—ç–º–ø–ª–µ—Ä–∞
    /// * `z2` - –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –ø—Ä–æ–±–æ–æ—Ç–±–æ—Ä–Ω–∏–∫–∞
    ///
    /// üá¨üáß Constructor
    ///
    /// # Arguments
    ///
    /// * `s1` - Pointer to the first sampler to be combined
    /// * `s2` - Pointer to the second sampler to be combined
    /// * `z1` - Coefficient for the first sampler
    /// * `z2` - Coefficient for the second sampler
    fn new<T>(s1: Box<T>, s2: Box<T>, z1: i64, z2: i64) -> Self
    where
        T: BaseSampler + Clone + 'static,
    {
        SamplerCombiner {
            sampler1: s1,
            sampler2: s2,
            x1: z1,
            x2: z2,
        }
    }
}

impl BaseSampler for SamplerCombiner {
    /// üá∑üá∫ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –¥–≤—É—Ö —Å—ç–º–ø–ª–µ—Ä–æ–≤ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏
    /// üá¨üáß Return the combined value for two samplers with given coefficients
    fn generate_integer(&mut self) -> i64 {
        self.x1 * self.sampler1.generate_integer() + self.x2 * self.sampler2.generate_integer()
    }
}

/// üá∑üá∫ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –¥–∏—Å–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥–∞—É—Å—Å–æ–≤—Å–∫–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è Generic.
/// üá¨üáß The struct for Generic Discrete Gaussian Distribution generator.
struct DiscreteGaussianGeneratorGeneric {
    base_samplers: Vec<Box<dyn BaseSampler>>,
    wide_sampler: Box<dyn BaseSampler>,
    combiners: Vec<Box<dyn BaseSampler>>,
    wide_variance: f64,
    sampler_variance: f64,
    x: f64,
    c: f64,
    ci: f64,
    k: i32,
    log_base: i32,
    mask: u64,
}

impl DiscreteGaussianGeneratorGeneric {
    /// üá∑üá∫ –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è.
    ///
    /// # –ê—Ä–≥—É–º–µ–Ω—Ç—ã
    ///
    /// * `samplers` - –ú–∞—Å—Å–∏–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –±–∞–∑–æ–≤—ã–µ –≤—ã–±–æ—Ä–∫–∏
    /// * `std` - –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –≤—ã–±–æ—Ä–æ–∫
    /// * `b` - –õ–æ–≥ —á–∏—Å–ª–∞ —Ü–µ–Ω—Ç—Ä–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö –≤—ã–±–æ—Ä–æ–∫ (–Ω–∞–ø–æ–º–Ω–∏–º, —á—Ç–æ –±–∞–∑–æ–≤—ã–µ –≤—ã–±–æ—Ä–∫–∏ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –æ—Ç 0 –¥–æ (2^b-1)/2^b)
    /// * `N` - –ü–∞—Ä–∞–º–µ—Ç—Ä —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è
    ///
    /// üá¨üáß Basic constructor which does the precomputations.
    ///
    /// # Arguments
    ///
    /// * `samplers` - Array containing the base samplers
    /// * `std` - Standard deviation of the base samplers
    /// * `b` - Log of number of centers that are used for calculating base samplers (Recall that base samplers are centered from 0 to (2^b-1)/2^b)
    /// * `N` - Smoothing parameter
    // fn new(samplers: Vec<Box<dyn BaseSampler>>, std: f64, b: i32, N: f64) -> Self {
    //     // Precomputation logic here
    //     DiscreteGaussianGeneratorGeneric {
    //         base_samplers: samplers,
    //         wide_sampler: BaseSampler::new(),
    //         combiners: vec![],
    //         wide_variance: 0.0,
    //         sampler_variance: 0.0,
    //         x: 0.0,
    //         c: 0.0,
    //         ci: 0.0,
    //         k: 0,
    //         log_base: b,
    //         mask: 0,
    //     }
    // }

    fn new(samplers: Vec<Box<dyn BaseSampler>>, std: f64, b: i32, n: f64) -> Self {
        let mut wide_sampler: Box<dyn BaseSampler> = Box::new(samplers[0].clone());
        let mut wide_variance = std.powi(2);
        let mut combiners: Vec<Box<dyn BaseSampler>> = Vec::new();

        for _ in 1..MAX_LEVELS {
            let x1 = (wide_variance / (2.0 * n.powi(2))).sqrt().floor() as u32;
            let x2 = std::cmp::max(x1 - 1, 1);
            wide_sampler = Box::new(SamplerCombiner::new(
                wide_sampler.clone(),
                wide_sampler,
                x1 as i64,
                x2 as i64,
            ));
            combiners.push(wide_sampler.clone());
            wide_variance = (x1.pow(2) + x2.pow(2)) as f64 * wide_variance;
        }

        let k = ((PRECISION - BERNOULLI_FLIPS) as f64 / b as f64).ceil() as u32;
        let mask = (1u64 << b) - 1;

        let mut sampler_variance = 1.0;
        let t = 1 / (1u64 << (2 * b));
        let mut s = 1.0;
        for _ in 1..k {
            s *= t as f64;
            sampler_variance += s;
        }
        sampler_variance *= std.powi(2);

        Self {
            base_samplers: samplers,
            log_base: b,
            wide_sampler,
            wide_variance,
            combiners,
            k: k as i32,
            mask,
            sampler_variance,
            x: 0.0,
            c: 0.0,
            ci: 0.0,
        }
    }

    /// üá∑üá∫ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–±—â–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –∏–∑ —Å—Ç–∞—Ç—å–∏ UCSD, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ Sample Z
    ///
    /// # –ê—Ä–≥—É–º–µ–Ω—Ç—ã
    ///
    /// * `mean` - –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    /// * `variance` - –í–∞—Ä–∏–∞—Ü–∏—è –∂–µ–ª–∞–µ–º–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    ///
    /// üá¨üáß Returns a generated integer. Uses generic algorithm in UCSD paper, based on Sample Z
    ///
    /// # Arguments
    ///
    /// * `mean` - Mean of the distribution
    /// * `variance` - Variance of the desired distribution
    // fn generate_integer(&self, mean: f64, variance: f64) -> i64 {
    //     let mut rng = rand::thread_rng();
    //     let gaussian = Gaussian::new(mean, variance.sqrt());
    //     let sample = gaussian.sample(&mut rng);
    //     sample.round() as i64
    // }
    fn generate_integer(&mut self, center: f64, std: f64) -> i64 {
        let variance = std.powi(2);
        let x = self.wide_sampler.generate_integer();

        let c =
            center + (x as f64) * ((variance - self.sampler_variance) / self.wide_variance).sqrt();

        let ci = c.floor() as i64;
        let c = c - ci as f64;

        ci + self.flip_and_round(c)
    }

    /// üá∑üá∫ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∞–∑–æ–≤–æ–≥–æ —Å—ç–º–ø–ª–µ—Ä–∞.
    /// üá¨üáß Returns a generated integer using the base sampler.
    // fn generate_integer(&self) -> i64 {
    //     self.base_samplers[0].generate_integer()
    // }

    /// üá∑üá∫ –ü–æ–¥–ø—Ä–æ–≥—Ä–∞–º–º–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –≤ –í—ã–±–æ—Ä–∫–µ C
    ///
    /// # –ê—Ä–≥—É–º–µ–Ω—Ç—ã
    ///
    /// * `center` - –¶–µ–Ω—Ç—Ä —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    ///
    /// üá¨üáß Subroutine used by Sample C
    ///
    /// # Arguments
    ///
    /// * `center` - Center of the distribution
    ///
    fn flip_and_round(&mut self, center: f64) -> i64 {
        let c = (center as u64 * (1u64 << PRECISION)) as i64;
        let base_c = c >> BERNOULLI_FLIPS;
        let mut random_bit;

        for i in (0..BERNOULLI_FLIPS).rev() {
            random_bit = self.base_samplers[0].generate_integer();
            if random_bit > self.extract_bit(c, i as i32).into() {
                return self.sample_c(base_c);
            }
            if random_bit < self.extract_bit(c, i as i32).into() {
                return self.sample_c(base_c + 1);
            }
        }
        self.sample_c(base_c + 1)
    }

    // fn flip_and_round(&self, center: f64) -> i64 {
    //     let mut rng = rand::thread_rng();
    //     let gaussian = Gaussian::new(center, self.wide_variance.sqrt());
    //     let sample = gaussian.sample(&mut rng);
    //     sample.round() as i64
    // }

    /// üá∑üá∫ –í—ã–±–æ—Ä–∫–∞ C, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –≤ —Å—Ç–∞—Ç—å–µ
    ///
    /// # –ê—Ä–≥—É–º–µ–Ω—Ç—ã
    ///
    /// * `center` - –¶–µ–Ω—Ç—Ä —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    ///
    /// üá¨üáß Sample C defined in the paper
    ///
    /// # Arguments
    ///
    /// * `center` - Center of the distribution
    fn sample_c(&mut self, center: i64) -> i64 {
        let mut c = center;
        let mut sample;
        for _ in 0..self.k {
            sample = self.base_samplers[(self.mask & c as u64) as usize].generate_integer();
            if (self.mask & c as u64) > 0 && c < 0 {
                sample -= 1;
            }
            c /= 2i64.pow(self.log_base as u32);
            c += sample;
        }
        c
    }

    // fn sample_c(&self, center: i64) -> i64 {
    //     let mut result = 0;
    //     for i in 0..self.k {
    //         let bit = self.extract_bit(center, i as i32);
    //         if bit == 1 {
    //             result += self.combiners[i as usize].generate_integer();
    //         }
    //     }
    //     result
    // }

    /// üá∑üá∫ –ú–µ—Ç–æ–¥, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π n-–π –±–∏—Ç —á–∏—Å–ª–∞
    ///
    /// # –ê—Ä–≥—É–º–µ–Ω—Ç—ã
    ///
    /// * `number` - –ß–∏—Å–ª–æ, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∏—Å–∫–æ–º—ã–π –±–∏—Ç.
    /// * `n` - –ù–æ–º–µ—Ä –∂–µ–ª–∞–µ–º–æ–≥–æ –±–∏—Ç–∞
    ///
    /// üá¨üáß Method to return the nth bit of a number
    ///
    /// # Arguments
    ///
    /// * `number` - The number that the bit of desired
    /// * `n` - Desired bit number
    fn extract_bit(&self, number: i64, n: i32) -> i32 {
        ((number >> n) & 0x1) as i32
    }
}
